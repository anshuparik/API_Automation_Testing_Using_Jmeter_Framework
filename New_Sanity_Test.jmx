<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Sanity_Test - Test Plan">
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager ">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">x-hptm-transaction-id</stringProp>
            <stringProp name="Header.value">${__groovy(return(&quot;JMeter_TxnID_${__time(DDMMYYYY_HHmmssSSS,)}&quot;);,jmeterhptm_tid)}</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">JMeter_TxnID_${__time(DDMMYYYY_HHmmssSSS,)}</stringProp>
      </HeaderManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Proxy" enabled="true">
        <stringProp name="HTTPSampler.proxyScheme">http</stringProp>
        <stringProp name="HTTPSampler.proxyHost">proxy-txn.austin.hpicorp.net</stringProp>
        <intProp name="HTTPSampler.proxyPort">8080</intProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Set Env value" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Environment" elementType="Argument">
            <stringProp name="Argument.name">Environment</stringProp>
            <stringProp name="Argument.value">${__property(Environment,Environment,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">if u want to run from Non GUI then enable this and pass env value</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Set Env value_DEV,STAGE,PIE" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Environment" elementType="Argument">
            <stringProp name="Argument.name">Environment</stringProp>
            <stringProp name="Argument.value">${__setProperty(Environment,DEV,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">if u want to run from GUI then set env property here</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Global Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Order_ID" elementType="Argument">
            <stringProp name="Argument.name">Order_ID</stringProp>
            <stringProp name="Argument.value">${Environment}${__timeShift(ddMMyyyyHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.desc">To get a unique value of Order ID </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Timestamp" elementType="Argument">
            <stringProp name="Argument.name">Timestamp</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd HH:mm:ss,,,,)}</stringProp>
            <stringProp name="Argument.desc">${__timeShift(yyyy-MM-dd HH:mm:ss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Unique_ID" elementType="Argument">
            <stringProp name="Argument.name">Unique_ID</stringProp>
            <stringProp name="Argument.value">${__Random(10000,999999)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FName" elementType="Argument">
            <stringProp name="Argument.name">FName</stringProp>
            <stringProp name="Argument.value">TestF${__RandomString(3,ABCDEFGHIJKLMN)}</stringProp>
            <stringProp name="Argument.desc">TestFNProd${__RandomString(3,ABCDEFGHIJKLMN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LName" elementType="Argument">
            <stringProp name="Argument.name">LName</stringProp>
            <stringProp name="Argument.value">TestL${__RandomString(3,ABCDEFGHIJKLMN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">prod.test${__Random(001,99999)}@YOPmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Customer_HPID" elementType="Argument">
            <stringProp name="Argument.name">Customer_HPID</stringProp>
            <stringProp name="Argument.value">HPID-${__timeShift(ddMMyyyyHHmmssSSS,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Exist_HPID" elementType="Argument">
            <stringProp name="Argument.name">Exist_HPID</stringProp>
            <stringProp name="Argument.value">JMeter-ExistingHPID-001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Subscription_Start_Date" elementType="Argument">
            <stringProp name="Argument.name">Subscription_Start_Date</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+00:00&apos;,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Subscription_End_Date" elementType="Argument">
            <stringProp name="Argument.name">Subscription_End_Date</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;+00:00&apos;,,P364D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="External_RefID" elementType="Argument">
            <stringProp name="Argument.name">External_RefID</stringProp>
            <stringProp name="Argument.value">000000000${__Random(001,999)}${__timeShift(ddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ContractAcc_ID" elementType="Argument">
            <stringProp name="Argument.name">ContractAcc_ID</stringProp>
            <stringProp name="Argument.value">${__Random(0000001,99999999)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Cancel_Date" elementType="Argument">
            <stringProp name="Argument.name">Cancel_Date</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DC" elementType="Argument">
            <stringProp name="Argument.name">DC</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RenewalDate" elementType="Argument">
            <stringProp name="Argument.name">RenewalDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P366D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="InvoiceDate" elementType="Argument">
            <stringProp name="Argument.name">InvoiceDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NextbillDate" elementType="Argument">
            <stringProp name="Argument.name">NextbillDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P366D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrentDate" elementType="Argument">
            <stringProp name="Argument.name">CurrentDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SubEndDate" elementType="Argument">
            <stringProp name="Argument.name">SubEndDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P365D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cancellationEffectiveDate" elementType="Argument">
            <stringProp name="Argument.name">cancellationEffectiveDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P363D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="soldToBpId" elementType="Argument">
            <stringProp name="Argument.name">soldToBpId</stringProp>
            <stringProp name="Argument.value">9002027524</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="shipToBpId" elementType="Argument">
            <stringProp name="Argument.name">shipToBpId</stringProp>
            <stringProp name="Argument.value">9002027524</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UUID" elementType="Argument">
            <stringProp name="Argument.name">UUID</stringProp>
            <stringProp name="Argument.value">${__UUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="External_RefID_SFY" elementType="Argument">
            <stringProp name="Argument.name">External_RefID_SFY</stringProp>
            <stringProp name="Argument.value">000000000${__Random(001,999)}${__timeShift(ddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="External_RefID_SFM" elementType="Argument">
            <stringProp name="Argument.name">External_RefID_SFM</stringProp>
            <stringProp name="Argument.value">000000000${__Random(001,999)}${__timeShift(ddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCToken_VISA" elementType="Argument">
            <stringProp name="Argument.name">CCToken_VISA</stringProp>
            <stringProp name="Argument.value">4966fe87f9f04eba977730f1b27858c44113</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCSignature_VISA" elementType="Argument">
            <stringProp name="Argument.name">CCSignature_VISA</stringProp>
            <stringProp name="Argument.value">17947e9531a3423e93235bba791c4bca</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardType_VISA" elementType="Argument">
            <stringProp name="Argument.name">CardType_VISA</stringProp>
            <stringProp name="Argument.value">001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCToken_AMEX" elementType="Argument">
            <stringProp name="Argument.name">CCToken_AMEX</stringProp>
            <stringProp name="Argument.value">3f7424c07d604c768d9f490b73500f711347</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCSignature_AMEX" elementType="Argument">
            <stringProp name="Argument.name">CCSignature_AMEX</stringProp>
            <stringProp name="Argument.value">2a9b935674f644849ca6c59780b7e273</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardType_AMEX" elementType="Argument">
            <stringProp name="Argument.name">CardType_AMEX</stringProp>
            <stringProp name="Argument.value">003</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCToken_Discover" elementType="Argument">
            <stringProp name="Argument.name">CCToken_Discover</stringProp>
            <stringProp name="Argument.value">57d79388682a4802a6fc9f03e11af1976557 </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCSignature_Discover" elementType="Argument">
            <stringProp name="Argument.name">CCSignature_Discover</stringProp>
            <stringProp name="Argument.value">2cce817e0ce54662a092bdce7a92af95</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardType_Discover" elementType="Argument">
            <stringProp name="Argument.name">CardType_Discover</stringProp>
            <stringProp name="Argument.value">004</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCToken_MasterCard" elementType="Argument">
            <stringProp name="Argument.name">CCToken_MasterCard</stringProp>
            <stringProp name="Argument.value">53eead0df7314cf29a30be05acf7b2534444</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CCSignature_MasterCard" elementType="Argument">
            <stringProp name="Argument.name">CCSignature_MasterCard</stringProp>
            <stringProp name="Argument.value">cb81efb5430b472abf22e5cd0f118603</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardType_MasterCard" elementType="Argument">
            <stringProp name="Argument.name">CardType_MasterCard</stringProp>
            <stringProp name="Argument.value">002</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FuturePaymentDueDate" elementType="Argument">
            <stringProp name="Argument.name">FuturePaymentDueDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P30D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PastPaymentDueDate" elementType="Argument">
            <stringProp name="Argument.name">PastPaymentDueDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd&apos;T&apos;HH:mm:ss,,P-30D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_Version" elementType="Argument">
            <stringProp name="Argument.name">API_Version</stringProp>
            <stringProp name="Argument.value">api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPOrder_ID" elementType="Argument">
            <stringProp name="Argument.name">CPOrder_ID</stringProp>
            <stringProp name="Argument.value">${Environment}CP${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumber" elementType="Argument">
            <stringProp name="Argument.name">SrNumber</stringProp>
            <stringProp name="Argument.value">SRDEV${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumber2" elementType="Argument">
            <stringProp name="Argument.name">SrNumber2</stringProp>
            <stringProp name="Argument.value">SRDEVMT${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumber1" elementType="Argument">
            <stringProp name="Argument.name">SrNumber1</stringProp>
            <stringProp name="Argument.value">SRDEVMO${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPFOOrder_ID" elementType="Argument">
            <stringProp name="Argument.name">CPFOOrder_ID</stringProp>
            <stringProp name="Argument.value">CPFO${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumberFO" elementType="Argument">
            <stringProp name="Argument.name">SrNumberFO</stringProp>
            <stringProp name="Argument.value">SRFO${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPHWUpdateOrder_ID" elementType="Argument">
            <stringProp name="Argument.name">CPHWUpdateOrder_ID</stringProp>
            <stringProp name="Argument.value">CPHWUp${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumberHWUpdate" elementType="Argument">
            <stringProp name="Argument.name">SrNumberHWUpdate</stringProp>
            <stringProp name="Argument.value">HW${__timeShift(YYMMddHHmm,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CP_Send_email" elementType="Argument">
            <stringProp name="Argument.name">CP_Send_email</stringProp>
            <stringProp name="Argument.value">gekko_cp_dev@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Send_email_cpstd" elementType="Argument">
            <stringProp name="Argument.name">Send_email_cpstd</stringProp>
            <stringProp name="Argument.value">gekko_cpstd_dev@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPSTD_HW_SR_NO" elementType="Argument">
            <stringProp name="Argument.name">CPSTD_HW_SR_NO</stringProp>
            <stringProp name="Argument.value">HWSrNo${__timeShift(YYMMddHHmm,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPEVOrder_ID" elementType="Argument">
            <stringProp name="Argument.name">CPEVOrder_ID</stringProp>
            <stringProp name="Argument.value">CPEV${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumberFO1" elementType="Argument">
            <stringProp name="Argument.name">SrNumberFO1</stringProp>
            <stringProp name="Argument.value">SRDEVFO${__timeShift(MMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumber4" elementType="Argument">
            <stringProp name="Argument.name">SrNumber4</stringProp>
            <stringProp name="Argument.value">SRDEVCFE${__timeShift(MMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPCFEOrder_ID" elementType="Argument">
            <stringProp name="Argument.name">CPCFEOrder_ID</stringProp>
            <stringProp name="Argument.value">CPCFE${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrentCancelDate" elementType="Argument">
            <stringProp name="Argument.name">CurrentCancelDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EstimatedDeliveryDate" elementType="Argument">
            <stringProp name="Argument.name">EstimatedDeliveryDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd HH:mm:ss,,P-60D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SrNumber5" elementType="Argument">
            <stringProp name="Argument.name">SrNumber5</stringProp>
            <stringProp name="Argument.value">SRDEVCWFE${__timeShift(MMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CPCWFEOrder_ID" elementType="Argument">
            <stringProp name="Argument.name">CPCWFEOrder_ID</stringProp>
            <stringProp name="Argument.value">CPCWFE${__timeShift(YYMMddHHmmss,,,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CancelFee_StartDate" elementType="Argument">
            <stringProp name="Argument.name">CancelFee_StartDate</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd HH:mm:ss,,-P50D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONFIG_PATH" elementType="Argument">
            <stringProp name="Argument.name">CONFIG_PATH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller DEV">
          <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;Environment&quot;) == &quot;Dev&quot;)}
${__groovy(props.get(&quot;Environment&quot;) == &quot;DEV&quot;)}
//&quot;${Environment}&quot;==&quot;Dev&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">false</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="jp@gc - Parameterized Controller">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Environment" elementType="Argument">
                  <stringProp name="Argument.name">Environment</stringProp>
                  <stringProp name="Argument.value">DEV</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Apigee_IP" elementType="Argument">
                  <stringProp name="Argument.name">Apigee_IP</stringProp>
                  <stringProp name="Argument.value">dev.subscriptions.api.hp.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BaseURL" elementType="Argument">
                  <stringProp name="Argument.name">BaseURL</stringProp>
                  <stringProp name="Argument.value">https://dev.subscriptions.api.hp.com/oauth/v1/</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID" elementType="Argument">
                  <stringProp name="Argument.name">ClientID</stringProp>
                  <stringProp name="Argument.value">eiS5JSBddm77GnMFSLS4AueT2ZoIdwbE</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID" elementType="Argument">
                  <stringProp name="Argument.name">SecretID</stringProp>
                  <stringProp name="Argument.value">QMPOVZyxIbT0bxgFPU0Xsaj9DrOva58L</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_DSP_Mock" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_DSP_Mock</stringProp>
                  <stringProp name="Argument.value">6HnuYG7DrA4cyjVqUoksC0NvJ4GvhMAC</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_DSP_Notification" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_DSP_Notification</stringProp>
                  <stringProp name="Argument.value">r3O9C3cnaNacZYeQifJE1Xl1mAVH4AZr</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_Subscription" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_Subscription</stringProp>
                  <stringProp name="Argument.value">KIDX7lAa10KnnnKgk1SrN17YHTTeiA2e</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CP_Send_email" elementType="Argument">
                  <stringProp name="Argument.name">CP_Send_email</stringProp>
                  <stringProp name="Argument.value">gekko_cp_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Demo_ClientID" elementType="Argument">
                  <stringProp name="Argument.name">Demo_ClientID</stringProp>
                  <stringProp name="Argument.value">kOPijIVVrPjgzGDcc2IRM3V4C2AvpQVa</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Demo_SecretID" elementType="Argument">
                  <stringProp name="Argument.name">Demo_SecretID</stringProp>
                  <stringProp name="Argument.value">qubVm3cN5KJnmCSIkgn4nWww0DHLZZKV</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="GET_API_IP" elementType="Argument">
                  <stringProp name="Argument.name">GET_API_IP</stringProp>
                  <stringProp name="Argument.value">gekko-dev.tropos-rnd.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Invoice_Email" elementType="Argument">
                  <stringProp name="Argument.name">Invoice_Email</stringProp>
                  <stringProp name="Argument.value">gekkowex_invoice_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="MLS_email" elementType="Argument">
                  <stringProp name="Argument.name">MLS_email</stringProp>
                  <stringProp name="Argument.value">gekkoqamls_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ReceiverSystemID" elementType="Argument">
                  <stringProp name="Argument.name">ReceiverSystemID</stringProp>
                  <stringProp name="Argument.value">GEKKO-DEV</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Sanity_Report" elementType="Argument">
                  <stringProp name="Argument.name">Sanity_Report</stringProp>
                  <stringProp name="Argument.value">Dev_Sanity_${__timeShift(MM-dd-yyyy-HHmmss,,,,)}</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_DSP_Mock" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_DSP_Mock</stringProp>
                  <stringProp name="Argument.value">Tfd9GhpFKkdN9zjKtXFGe6XnfQZvtwV9</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_DSP_Notification" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_DSP_Notification</stringProp>
                  <stringProp name="Argument.value">WCkAyT9y06qwnvRjvl6v9ZrwZwyBSPWY</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_Subscription" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_Subscription</stringProp>
                  <stringProp name="Argument.value">teZOz2Xk7IRLXrkye8U5BBLgScTC6yrm</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_cpstd" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_cpstd</stringProp>
                  <stringProp name="Argument.value">gekko_cpstd_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_demo" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_demo</stringProp>
                  <stringProp name="Argument.value">gekko_demo_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_sf" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_sf</stringProp>
                  <stringProp name="Argument.value">gekko_sf_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_wex" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_wex</stringProp>
                  <stringProp name="Argument.value">gekko_wex_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_wps" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_wps</stringProp>
                  <stringProp name="Argument.value">gekko_wps_dev@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.ParameterizedController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1436790407">Sanity_Test - Test Plan</stringProp>
                <stringProp name="1744065236">All_Test_Cases</stringProp>
                <stringProp name="-2079589835">Test Cases</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.info(&quot;Environment Property Value: &quot; + props.get(&quot;Environment&quot;))</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller PIE">
          <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;Environment&quot;) == &quot;Dev&quot;)}
${__groovy(props.get(&quot;Environment&quot;) == &quot;PIE&quot;)}
//&quot;${Environment}&quot;==&quot;Dev&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">false</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="jp@gc - Parameterized Controller">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Apigee_IP" elementType="Argument">
                  <stringProp name="Argument.name">Apigee_IP</stringProp>
                  <stringProp name="Argument.value">test.subscriptions.api.hp.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BaseURL" elementType="Argument">
                  <stringProp name="Argument.name">BaseURL</stringProp>
                  <stringProp name="Argument.value">https://test.subscriptions.api.hp.com/oauth/v1/</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID" elementType="Argument">
                  <stringProp name="Argument.name">ClientID</stringProp>
                  <stringProp name="Argument.value">f0wHAjLtudfCelImkOS8nXxTvzCXAPBO</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID" elementType="Argument">
                  <stringProp name="Argument.name">SecretID</stringProp>
                  <stringProp name="Argument.value">AsLSDZpJQ8cfaFw0Qd4Ife0B13cnfI5T</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_DSP_Mock" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_DSP_Mock</stringProp>
                  <stringProp name="Argument.value">Wlfks6QtsO88ZBsvxTtsBo2KblZkomGW</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_DSP_Notification" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_DSP_Notification</stringProp>
                  <stringProp name="Argument.value">ngbXx68TLxbtQfvfgv3z0xZS0XjUOZ0h</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_Subscription" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_Subscription</stringProp>
                  <stringProp name="Argument.value">nWji2HauUCxdhVcgpmPUlT1jNYtDbp5L</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CP_Send_email" elementType="Argument">
                  <stringProp name="Argument.name">CP_Send_email</stringProp>
                  <stringProp name="Argument.value">gekko_cp_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Demo_ClientID" elementType="Argument">
                  <stringProp name="Argument.name">Demo_ClientID</stringProp>
                  <stringProp name="Argument.value">1L9SX53u5f724f3XZB5223c4NsGUtDqe</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Demo_SecretID" elementType="Argument">
                  <stringProp name="Argument.name">Demo_SecretID</stringProp>
                  <stringProp name="Argument.value">ulY7VUtVxmm6eG1qVipSzU5yrLhd06xC</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Environment" elementType="Argument">
                  <stringProp name="Argument.name">Environment</stringProp>
                  <stringProp name="Argument.value">PIE</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="GET_API_IP" elementType="Argument">
                  <stringProp name="Argument.name">GET_API_IP</stringProp>
                  <stringProp name="Argument.value">gekko-pie.tropos-rnd.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Invoice_Email" elementType="Argument">
                  <stringProp name="Argument.name">Invoice_Email</stringProp>
                  <stringProp name="Argument.value">gekkowex_invoice_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="MLS_email" elementType="Argument">
                  <stringProp name="Argument.name">MLS_email</stringProp>
                  <stringProp name="Argument.value">gekkoqamls_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ReceiverSystemID" elementType="Argument">
                  <stringProp name="Argument.name">ReceiverSystemID</stringProp>
                  <stringProp name="Argument.value">GEKKO-PIE</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Sanity_Report" elementType="Argument">
                  <stringProp name="Argument.name">Sanity_Report</stringProp>
                  <stringProp name="Argument.value">Pie_Sanity_${__timeShift(MM-dd-yyyy-HHmmss,,,,)}</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_DSP_Mock" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_DSP_Mock</stringProp>
                  <stringProp name="Argument.value">L0jMQcmj7bZaOt2vf8H03Qa7bWMkSR6Y</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_DSP_Notification" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_DSP_Notification</stringProp>
                  <stringProp name="Argument.value">oQhnAgdPNF1geMaPBE80cxuPLsFNyZU3</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_Subscription" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_Subscription</stringProp>
                  <stringProp name="Argument.value">9FWoO0PSUknIvh5ZF3iDhlpT0iOwfvjR</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_cpstd" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_cpstd</stringProp>
                  <stringProp name="Argument.value">gekko_cpstd_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_demo" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_demo</stringProp>
                  <stringProp name="Argument.value">gekko_demo_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_sf" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_sf</stringProp>
                  <stringProp name="Argument.value">gekko_sf_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_wex" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_wex</stringProp>
                  <stringProp name="Argument.value">gekko_wex_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_wps" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_wps</stringProp>
                  <stringProp name="Argument.value">gekko_wps_pie@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">pie</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.ParameterizedController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1436790407">Sanity_Test - Test Plan</stringProp>
                <stringProp name="1744065236">All_Test_Cases</stringProp>
                <stringProp name="-2079589835">Test Cases</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.info(&quot;Environment Property Value: &quot; + props.get(&quot;Environment&quot;))</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller STAGE">
          <stringProp name="IfController.condition">//${__groovy(vars.get(&quot;Environment&quot;) == &quot;Dev&quot;)}
${__groovy(props.get(&quot;Environment&quot;) == &quot;STAGE&quot;)}
//&quot;${Environment}&quot;==&quot;Dev&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">false</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="jp@gc - Parameterized Controller">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Apigee_IP" elementType="Argument">
                  <stringProp name="Argument.name">Apigee_IP</stringProp>
                  <stringProp name="Argument.value">stage.subscriptions.api.hp.com</stringProp>
                  <stringProp name="Argument.desc">Stage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="BaseURL" elementType="Argument">
                  <stringProp name="Argument.name">BaseURL</stringProp>
                  <stringProp name="Argument.value">https://stage.subscriptions.api.hp.com/oauth/v1/</stringProp>
                  <stringProp name="Argument.desc">Stage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID" elementType="Argument">
                  <stringProp name="Argument.name">ClientID</stringProp>
                  <stringProp name="Argument.value">PHxHxM6JGuIhjFwhTKsk9yJlAYbjEySu</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID" elementType="Argument">
                  <stringProp name="Argument.name">SecretID</stringProp>
                  <stringProp name="Argument.value">Y4kaOclKZXMHeJv1yAHjgMWLdlK88n5y</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_DSP_Mock" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_DSP_Mock</stringProp>
                  <stringProp name="Argument.value">oA4JZiF7gVUhqUGnimpOckYGKLAejoID</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_DSP_Notification" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_DSP_Notification</stringProp>
                  <stringProp name="Argument.value">k9RlBcc6wDX1BgXyooSQZT2HTjQWy9pK</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ClientID_Subscription" elementType="Argument">
                  <stringProp name="Argument.name">ClientID_Subscription</stringProp>
                  <stringProp name="Argument.value">xhH9VvD2LDIT4wOAw5ZQQ4LiZHukbvWt</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CP_Send_email" elementType="Argument">
                  <stringProp name="Argument.name">CP_Send_email</stringProp>
                  <stringProp name="Argument.value">gekko_cp_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Demo_ClientID" elementType="Argument">
                  <stringProp name="Argument.name">Demo_ClientID</stringProp>
                  <stringProp name="Argument.value">Riba1Xis4T8oIP8UaXTOsWivKarLSvZR</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Demo_SecretID" elementType="Argument">
                  <stringProp name="Argument.name">Demo_SecretID</stringProp>
                  <stringProp name="Argument.value">2cF74G8OfT4OKKRnc6uInYoBVOwefSJv</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Environment" elementType="Argument">
                  <stringProp name="Argument.name">Environment</stringProp>
                  <stringProp name="Argument.value">STG</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="GET_API_IP" elementType="Argument">
                  <stringProp name="Argument.name">GET_API_IP</stringProp>
                  <stringProp name="Argument.value">gekko-stg.tropos-rnd.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Invoice_Email" elementType="Argument">
                  <stringProp name="Argument.name">Invoice_Email</stringProp>
                  <stringProp name="Argument.value">gekkowex_invoice_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="MLS_email" elementType="Argument">
                  <stringProp name="Argument.name">MLS_email</stringProp>
                  <stringProp name="Argument.value">gekkoqamls_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ReceiverSystemID" elementType="Argument">
                  <stringProp name="Argument.name">ReceiverSystemID</stringProp>
                  <stringProp name="Argument.value">GEKKO-STG</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Sanity_Report" elementType="Argument">
                  <stringProp name="Argument.name">Sanity_Report</stringProp>
                  <stringProp name="Argument.value">stg_Sanity_${__timeShift(MM-dd-yyyy-HHmmss,,,,)}</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_DSP_Mock" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_DSP_Mock</stringProp>
                  <stringProp name="Argument.value">8Kfk34Td87fp1pUMBpKtsa2AR8FnK12g</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_DSP_Notification" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_DSP_Notification</stringProp>
                  <stringProp name="Argument.value">xhH9VvD2LDIT4wOAw5ZQQ4LiZHukbvWt</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="SecretID_Subscription" elementType="Argument">
                  <stringProp name="Argument.name">SecretID_Subscription</stringProp>
                  <stringProp name="Argument.value">h9ih3NdrTIu622647677PEyiKOnuXiQW</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_cpstd" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_cpstd</stringProp>
                  <stringProp name="Argument.value">gekko_cpstd_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_demo" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_demo</stringProp>
                  <stringProp name="Argument.value">gekko_demo_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_sf" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_sf</stringProp>
                  <stringProp name="Argument.value">gekko_sf_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_wex" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_wex</stringProp>
                  <stringProp name="Argument.value">gekko_wex_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="Send_email_wps" elementType="Argument">
                  <stringProp name="Argument.name">Send_email_wps</stringProp>
                  <stringProp name="Argument.value">gekko_wps_stg@yopmail.com</stringProp>
                  <stringProp name="Argument.desc">stg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.ParameterizedController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1436790407">Sanity_Test - Test Plan</stringProp>
                <stringProp name="1744065236">All_Test_Cases</stringProp>
                <stringProp name="-2079589835">Test Cases</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.info(&quot;Environment Property Value: &quot; + props.get(&quot;Environment&quot;))</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="All_Test_Cases" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test Cases"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Token" enabled="true"/>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">${BaseURL}</stringProp>
                  <stringProp name="Authorization.username">${ClientID}</stringProp>
                  <stringProp name="Authorization.password">${SecretID}</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                  <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              <stringProp name="TestPlan.comments">hpcorp-amur-dev.default.api.hp.com</stringProp>
            </AuthManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apigee_Token_Generation" enabled="true">
              <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">/oauth/v1/token</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">C_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No value</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WPS"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WPS_Order_Creation" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_Order_Create_Amex ${Environment}" enabled="true">
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;orderId&quot;: &quot;A${Order_ID}&quot;,&#xd;
    &quot;country&quot;: &quot;US&quot;,&#xd;
    &quot;sourceSystem&quot;:&quot;USSTORE&quot;, &#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;items&quot;: [&#xd;
        {&#xd;
            &quot;productName&quot;: &quot;DevRegProduct_${Unique_ID}&quot;,&#xd;
            &quot;sku&quot;: &quot;U33T3AAE&quot;,&#xd;
            &quot;quantity&quot;: 1,&#xd;
            &quot;itemId&quot;: &quot;001&quot;,&#xd;
            &quot;charge&quot;: {&#xd;
                &quot;price&quot;: 36,&#xd;
                &quot;tax&quot;: 3.20,&#xd;
                &quot;taxNumber&quot;: &quot;2034&quot;,&#xd;
                &quot;taxType&quot;: &quot;VAT&quot;,&#xd;
                &quot;date&quot;: &quot;${Timestamp}&quot;&#xd;
            },&#xd;
            &quot;recurringChargeConfig&quot;: {&#xd;
                &quot;frequencyLength&quot;: 1,&#xd;
                &quot;frequencyUnit&quot;: &quot;Year&quot;&#xd;
            },&#xd;
            &quot;orgUnit&quot;: {&#xd;
            	&quot;salesOrganization&quot;: &quot;US11&quot;,&#xd;
            	&quot;distributionChannel&quot;: &quot;${DC}&quot;,&#xd;
            	&quot;division&quot;: &quot;00&quot;&#xd;
       		 },&#xd;
            &quot;promoCode&quot;: &quot;PC-${Unique_ID}&quot;,&#xd;
            &quot;autoRenewal&quot;: true,&#xd;
            &quot;subscriptionStartDate&quot;: &quot;${Timestamp}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;hpId&quot;: &quot;A${Customer_HPID}&quot;,&#xd;
        &quot;firstName&quot;: &quot;${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;${LName}&quot;,&#xd;
        &quot;email&quot;: &quot;${Send_email_wps}&quot;,&#xd;
        &quot;locale&quot;: &quot;en&quot;,&#xd;
        &quot;phoneNumber&quot;:&quot;2345112345&quot;,&#xd;
        &quot;extension&quot;:&quot;11&quot;,&#xd;
        &quot;phoneCountryCode&quot;:&quot;+1&quot;&#xd;
    },&#xd;
    &quot;paymentMethod&quot;: {&#xd;
        &quot;details&quot;: {&#xd;
            &quot;type&quot;: &quot;Credit Card&quot;,&#xd;
            &quot;lastFour&quot;: &quot;1234&quot;,&#xd;
            &quot;paymentProcessor&quot;: &quot;${CardType_AMEX}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;12/2024&quot;,&#xd;
            &quot;paymentGateway&quot;: &quot;PGS&quot;,&#xd;
            &quot;token&quot;: &quot;${CCToken_AMEX}&quot;,&#xd;
            &quot;tokenSignature&quot;: &quot;${CCSignature_AMEX}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${FName} ${LName}  @%&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;shipping&quot;: {&#xd;
        &quot;address&quot;: {&#xd;
            &quot;firstName&quot;: &quot;AD${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;AD${LName}&quot;,&#xd;
            &quot;address1&quot;: &quot;${Order_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_${Order_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;Melrose&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;la&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
            &quot;extension&quot;: &quot;1122&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
            &quot;hpId&quot;: &quot;A${Customer_HPID}&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;billingAddress&quot;: {&#xd;
            &quot;firstName&quot;: &quot;AD${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;AD${LName}&quot;,&#xd;
            &quot;address1&quot;: &quot;${Order_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_${Order_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;Melrose&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;ny&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
            &quot;extension&quot;: &quot;1122&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
            &quot;hpId&quot;: &quot;A${Customer_HPID}&quot;&#xd;
        },&#xd;
    &quot;soldToAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Sold Fname&quot;,&#xd;
        &quot;lastName&quot;: &quot;Sold Lname&quot;,&#xd;
        &quot;address1&quot;: &quot;46 sto/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;fl&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;8765432198&quot;,&#xd;
        &quot;extension&quot;: &quot;03&quot;,&#xd;
        &quot;company&quot;: &quot;STO&quot;&#xd;
    },&#xd;
    &quot;payerAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Payer Fname&quot;,&#xd;
        &quot;lastName&quot;: &quot;Payer Lname&quot;,&#xd;
        &quot;address1&quot;: &quot;46 pay/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;Dallas&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;AR&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;8765432198&quot;,&#xd;
        &quot;extension&quot;: &quot;04&quot;,&#xd;
        &quot;company&quot;: &quot;PAY&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="695991730">Order has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_New_Customer_Different_Shipping_Billing_Address ${Environment}" enabled="false">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/customer-information-service/internal/v1/customer?emailId=${Send_email_wps}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Customer_Info" enabled="true">
                  <stringProp name="JSON_PATH">$[0].CustomerInfo</stringProp>
                  <stringProp name="EXPECTED_VALUE">[
  {
    &quot;firstName&quot;: &quot;${FName}&quot;,
    &quot;lastName&quot;: &quot;${LName}&quot;,
    &quot;hpId&quot;: &quot;A${Customer_HPID}&quot;,
    &quot;shipToBpId&quot;: null,
    &quot;slodToBpId&quot;: null,
    &quot;externalRefId&quot;: null,
    &quot;invoiceEmail&quot;: null,
    &quot;state&quot;: &quot;Active&quot;,
    &quot;externalRef&quot;: &quot;null&quot;,
    &quot;email&quot;: &quot;${Send_email_wps}&quot;
  }
]</stringProp>
                  <boolProp name="JSONVALIDATION">false</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                  <stringProp name="TestPlan.comments">$[0].CustomerInfo</stringProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Shipping_address" enabled="true">
                  <stringProp name="JSON_PATH">$[0].AddressInfo[0]</stringProp>
                  <stringProp name="EXPECTED_VALUE">[
  {
    &quot;firstName&quot;: &quot;AD${FName}&quot;,
    &quot;lastName&quot;: &quot;AD${LName}&quot;,
    &quot;zipCode&quot;: &quot;12121&quot;,
    &quot;extension&quot;: &quot;1122&quot;,
    &quot;address2&quot;: &quot;sh_address_${Order_ID}&quot;,
    &quot;city&quot;: &quot;Melrose&quot;,
    &quot;address1&quot;: &quot;${Order_ID} sh/1 Park Street&quot;,
    &quot;countryCode&quot;: &quot;US&quot;,
    &quot;stateProvince&quot;: &quot;LA&quot;,
    &quot;company&quot;: &quot;Gekko test&quot;
  }
]</stringProp>
                  <boolProp name="JSONVALIDATION">false</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Billing_Address" enabled="true">
                  <stringProp name="JSON_PATH">$[0].AddressInfo[1]</stringProp>
                  <stringProp name="EXPECTED_VALUE">[
  {
    &quot;firstName&quot;: &quot;AD${FName}&quot;,
    &quot;lastName&quot;: &quot;AD${LName}&quot;,
    &quot;zipCode&quot;: &quot;12121&quot;,
    &quot;extension&quot;: &quot;1122&quot;,
    &quot;address2&quot;: &quot;sh_address_${Order_ID}&quot;,
    &quot;city&quot;: &quot;Melrose&quot;,
    &quot;address1&quot;: &quot;${Order_ID} sh/1 Park Street&quot;,
    &quot;countryCode&quot;: &quot;US&quot;,
    &quot;stateProvince&quot;: &quot;NY&quot;,
    &quot;company&quot;: &quot;Gekko test&quot;
  }
]</stringProp>
                  <boolProp name="JSONVALIDATION">false</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Payment_method" enabled="true">
                  <stringProp name="JSON_PATH">$[0].PaymentMethod[0]</stringProp>
                  <stringProp name="EXPECTED_VALUE">[
  {
    &quot;lastFour&quot;: &quot;1234&quot;,
    &quot;expiryDate&quot;: &quot;12/2024&quot;,
    &quot;cardHolderName&quot;: &quot;${FName} ${LName}  @%&quot;,
    &quot;paymentProcessor&quot;: &quot;${CardType_AMEX}&quot;,
    &quot;poNumber&quot;: null,
    &quot;paymentTerm&quot;: null,
    &quot;paymentType&quot;: &quot;Credit Card&quot;
  }
]</stringProp>
                  <boolProp name="JSONVALIDATION">false</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_New_Customer_Data_HPID ${Environment}" enabled="false">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/customer-information-service/internal/v1/customer/A${Customer_HPID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="customer_firstName" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1472027822">&quot;firstName&quot;:&quot;${FName}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Customer_lastName" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1834206750">&quot;lastName&quot;:&quot;${LName}&quot;</stringProp>
                    <stringProp name="-707029962">&quot;hpId&quot;:&quot;A${Customer_HPID}&quot;</stringProp>
                    <stringProp name="1463135148">&quot;email&quot;:&quot;${Send_email_wps}&quot;</stringProp>
                    <stringProp name="955356833">&quot;state&quot;:&quot;Active&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Customer_HPID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-707029962">&quot;hpId&quot;:&quot;A${Customer_HPID}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Customer_Email_ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1463135148">&quot;email&quot;:&quot;${Send_email_wps}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Customer_state" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="955356833">&quot;state&quot;:&quot;Active&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="shipping_address_address1" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1795185727">&quot;address1&quot;:&quot;${Order_ID} sh/1 Park Street&quot;</stringProp>
                    <stringProp name="1749822739">&quot;address2&quot;:&quot;sh_address_${Order_ID}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="shipping_address_CITY" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1681869565">Melrose</stringProp>
                    <stringProp name="-1141414500">&quot;city&quot;:&quot;Melrose&quot;</stringProp>
                    <stringProp name="2718">US</stringProp>
                    <stringProp name="46790767">12121</stringProp>
                    <stringProp name="-2012550101">&quot;firstName&quot;:&quot;AD${FName}&quot;</stringProp>
                    <stringProp name="1433895707">&quot;lastName&quot;:&quot;AD${LName}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="shipping_address_Country" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1795185727">&quot;address1&quot;:&quot;${Order_ID} sh/1 Park Street&quot;</stringProp>
                    <stringProp name="2718">US</stringProp>
                    <stringProp name="46790767">12121</stringProp>
                    <stringProp name="-2012550101">&quot;firstName&quot;:&quot;AD${FName}&quot;</stringProp>
                    <stringProp name="1433895707">&quot;lastName&quot;:&quot;AD${LName}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="shipping_address_Zip code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="46790767">12121</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="shipping_address_First and last name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2012550101">&quot;firstName&quot;:&quot;AD${FName}&quot;</stringProp>
                    <stringProp name="1433895707">&quot;lastName&quot;:&quot;AD${LName}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="billing_address_Address" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1795185727">&quot;address1&quot;:&quot;${Order_ID} sh/1 Park Street&quot;</stringProp>
                    <stringProp name="1749822739">&quot;address2&quot;:&quot;sh_address_${Order_ID}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="billing_address_city" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1141414500">&quot;city&quot;:&quot;Melrose&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="billing_address_stateProvince" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1710881644">&quot;stateProvince&quot;:&quot;NY&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="billing_address_country_Code and Zipcode" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="57530043">&quot;countryCode&quot;:&quot;US&quot;</stringProp>
                    <stringProp name="-975258607">&quot;zipCode&quot;:&quot;12121&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="billing_address_First and last name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="57530043">&quot;countryCode&quot;:&quot;US&quot;</stringProp>
                    <stringProp name="-975258607">&quot;zipCode&quot;:&quot;12121&quot;</stringProp>
                    <stringProp name="-2012550101">&quot;firstName&quot;:&quot;AD${FName}&quot;</stringProp>
                    <stringProp name="1433895707">&quot;lastName&quot;:&quot;AD${LName}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable">NCAddress_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_payment_method" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="126238662">&quot;paymentProcessor&quot;:&quot;${CardType_AMEX}&quot;</stringProp>
                    <stringProp name="-1987559881">&quot;paymentType&quot;:&quot;Credit Card&quot;</stringProp>
                    <stringProp name="-790372204">&quot;lastFour&quot;:&quot;1234&quot;</stringProp>
                    <stringProp name="2011981179">&quot;expiryDate&quot;:&quot;12/2024&quot;</stringProp>
                    <stringProp name="-119852252">&quot;cardHolderName&quot;:&quot;${FName} ${LName}  @%&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="payment_method_payment_Processor" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="126238662">&quot;paymentProcessor&quot;:&quot;${CardType_AMEX}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="payment_method_PaymentType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1987559881">&quot;paymentType&quot;:&quot;Credit Card&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="payment_method_Credit_Card_Deatils" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-790372204">&quot;lastFour&quot;:&quot;1234&quot;</stringProp>
                    <stringProp name="2011981179">&quot;expiryDate&quot;:&quot;12/2024&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="payment_method_Credit_Card_Holder_Deatils" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-119852252">&quot;cardHolderName&quot;:&quot;${FName} ${LName}  @%&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">6000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WPS_Order_Deatils_From_BRIM" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Pause 2 min" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">90000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_BRIM_ContractAccountCreate_Amex" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/A${Order_ID}?operationName=ContractAccountCreate</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - C_Subscription_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Subscription_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;subscriptionId&quot;:(.*?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Subscription_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Contract_Account_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Contract_Account_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.regex">Contract Acccount (.*?) created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Contract_Account_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Sold To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_SoldTo_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.regex">Sold To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_SoldTo_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Ship To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_ShipTo_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.regex">Ship To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_ShipTo_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(?i)(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Contract_Account_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-752356610">message=&apos;Sold To BP Classification updated successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="contract_Account-soldTo" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.soldTo</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_SoldTo_ID_AMEX}&quot;</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="contract_Account-shipTo" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.shipTo</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_ShipTo_ID_AMEX}&quot;
</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Contract_Account - Contract Account Id" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.contractAccountId</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_Contract_Account_ID_AMEX}&quot;</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract_Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract - External System" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2057661643">&quot;externalSystemName&quot;:&quot;BRIM&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Lanuage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1426913737">{\&quot;ContractAccount\&quot;:{\&quot;BusinessPartner\&quot;:{\&quot;Language\&quot;:\&quot;EN\&quot;,</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Payment Terms" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1618575047">&quot;PaymentTerms\&quot;:\&quot;ZCPA\&quot;,\&quot;IncomingPaymentMethod\&quot;:\&quot;A\&quot;,\&quot;AccountDeterminationID\&quot;:\&quot;NB\&quot;,\&quot;EventType\&quot;:\&quot;C\&quot;,\&quot;ContractAccountCategory\&quot;:\&quot;NB\&quot;,\&quot;ContractAccountName\&quot;:\&quot;A${Customer_HPID}\&quot;,\&quot;CompanyCodeGroup\&quot;:\&quot;US11\&quot;,\&quot;StandardCompanyCode\&quot;:\&quot;US11\&quot;,\&quot;InvoiceLanguage\&quot;:\&quot;EN\&quot;,\&quot;PaymentToken\&quot;:\&quot;${CCToken_AMEX}\&quot;,\&quot;PaymentSignature\&quot;:\&quot;${CCSignature_AMEX}\&quot;,\&quot;PaymentLastFour\&quot;:\&quot;1234\&quot;,\&quot;PaymentExpire\&quot;:\&quot;12/2024\&quot;,\&quot;PaymentType\&quot;:\&quot;${CardType_AMEX}\&quot;,\&quot;CardHolderName\&quot;:\&quot;${FName} ${LName}  @%\&quot;,\&quot;PaymentExpirationMonth\&quot;:\&quot;12\&quot;,\&quot;PaymentExpirationYear\&quot;:\&quot;2024\&quot;,\&quot;Currency\&quot;:\&quot;USD\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Outgoing Payment Method" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-11967359">&quot;OutgoingPaymentMethod\&quot;:\&quot;B\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;0001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;0001\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1857721038">&quot;statusCodeValue\&quot;:200</stringProp>
                    <stringProp name="-2083664997">&quot;statusCode\&quot;:\&quot;OK\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Contract Account ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1603184035">Contract Acccount ${C_Contract_Account_ID_AMEX} created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Sold TO" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1723645823">Sold To BP ${C_SoldTo_ID_AMEX} created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-DC" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_BRIM_SubscriptionCreate_Amex" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/A${Order_ID}?operationName=SubscriptionCreate</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.regex">Provider document (.*?) Created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID_AMEX</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_AMEX</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract ReferenceID_AMEX</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sourcesystem" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">sourcesystem</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;OriginalSourceSystem\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.default"></stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">2</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM - Contract_Account_ID_AMEX" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-681739989">&quot;ContractAccount\&quot;:\&quot;${C_Contract_Account_ID_AMEX}\&quot;,\&quot;Material\&quot;:\&quot;U33T3AAE\&quot;,\&quot;Quantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;},\&quot;PriceComponent\&quot;:{\&quot;ConditionType\&quot;:\&quot;ZSAF\&quot;,\&quot;ConditionRateValue\&quot;:\&quot;36.00\&quot;,\&quot;ConditionCurrency\&quot;:\&quot;USD\&quot;,\&quot;ConditionQuantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;}},\&quot;BillingCycle\&quot;:\&quot;ABS\&quot;,\&quot;Characteristics\&quot;:[{\&quot;Characteristic\&quot;:\&quot;AutoRenewalFlag\&quot;,\&quot;Value\&quot;:\&quot;Y\&quot;},{\&quot;Characteristic\&quot;:\&quot;Licenses\&quot;,\&quot;Value\&quot;:\&quot;1\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingModel\&quot;,\&quot;Value\&quot;:\&quot;SUBS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BusinessModel\&quot;,\&quot;Value\&quot;:\&quot;SAAS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingType\&quot;,\&quot;Value\&quot;:\&quot;ADV\&quot;},{\&quot;Characteristic\&quot;:\&quot;ChargeType\&quot;,\&quot;Value\&quot;:\&quot;RECURRING</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM - statusCodeValue" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1857721039">&quot;statusCodeValue\&quot;:201</stringProp>
                    <stringProp name="-1585296843">&quot;statusCode\&quot;:\&quot;CREATED\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-TransactionID" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_AMEX&quot;)
def storedID = vars.get(&quot;C_Txn_ID_AMEX&quot;)
log.info(&quot;extratcted one&quot; +extractedID)
log.info(&quot;stored one&quot; +storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - Ext_Ref_ID_AMEX" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-20651760">&quot;Provider document ${C_Ext_Ref_ID_AMEX} Created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - Contract_Account_ID_AMEX" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1105161089">&quot;ContractAccountID\&quot;:\&quot;${C_Contract_Account_ID_AMEX}\&quot;,\&quot;SubscriptionContractItem\&quot;:\&quot;000010\&quot;,\&quot;Material\&quot;:\&quot;U33T3AHB\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - OriginalSourceSystem" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1519147493">&quot;OriginalSourceSystem\&quot;:\&quot;${sourcesystem}\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Subscription Table - externalRefId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1093541602">&quot;externalRefId&quot;:&quot;${C_Ext_Ref_ID_AMEX}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Subscription Table - DistributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-631002258">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="order Info" enabled="true">
                  <stringProp name="JSON_PATH">$[0].order_Info</stringProp>
                  <stringProp name="EXPECTED_VALUE">{&quot;errorTimestamp&quot;:null,&quot;clientId&quot;:&quot;${ClientID}&quot;,&quot;customerHpId&quot;:&quot;A${Customer_HPID}&quot;,&quot;errorInformation&quot;:null,&quot;shippingInfo&quot;:&quot;{\&quot;address\&quot;:{\&quot;firstName\&quot;:\&quot;AD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;AD${LName}\&quot;,\&quot;address1\&quot;:\&quot;${Order_ID} sh\/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;LA\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;A${Customer_HPID}\&quot;}}&quot;,&quot;paymentMethod&quot;:&quot;{\&quot;details\&quot;:{\&quot;type\&quot;:\&quot;Credit Card\&quot;,\&quot;lastFour\&quot;:\&quot;1234\&quot;,\&quot;paymentProcessor\&quot;:\&quot;${CardType_AMEX}\&quot;,\&quot;expiryDate\&quot;:\&quot;12\/2024\&quot;,\&quot;paymentGateway\&quot;:\&quot;PGS\&quot;,\&quot;token\&quot;:\&quot;${CCToken_AMEX}\&quot;,\&quot;tokenSignature\&quot;:\&quot;${CCSignature_AMEX}\&quot;,\&quot;cardHolderName\&quot;:\&quot;${FName} ${LName}  @%\&quot;,\&quot;poNumber\&quot;:null,\&quot;paymentTerm\&quot;:null}}&quot;,&quot;orderStatus&quot;:&quot;CREATED&quot;,&quot;billingAddress&quot;:&quot;{\&quot;firstName\&quot;:\&quot;AD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;AD${LName}\&quot;,\&quot;address1\&quot;:\&quot;${Order_ID} sh\/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;NY\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;A${Customer_HPID}\&quot;}&quot;,&quot;externalRef&quot;:&quot;null&quot;}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_DistributionChannel-OrderInfoTable" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/A${Order_ID}/distributionChannelDetails</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="salesOrganization" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="division" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="distributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_DistributionChannel-SubsTable" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/subscriptions/${C_Subscription_ID_AMEX}/distributionChannelDetails</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="subscriptionId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1932705815">&quot;subscriptionId&quot;:${C_Subscription_ID_AMEX}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="salesOrganization" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="division" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="distributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WPS_Cancel_Subscription">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_Cancel_Subscription" enabled="true">
                <stringProp name="TestPlan.comments">select subscription_id,customer_hp_id from subscription;</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/customers/A${Customer_HPID}/subscriptions/${C_Subscription_ID_AMEX}/cancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"> {&#xd;
  &quot;cancelledAt&quot;: &quot;${Cancel_Date}T23:00:00+00:00&quot;,&#xd;
  &quot;externalRef&quot;: &#xd;
  [&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;R Order Num&quot;,&#xd;
      &quot;value&quot;: &quot;Cancel Subscription&quot;&#xd;
    }&#xd;
  ],&#xd;
    &quot;cancellationFee&quot;: &quot;1000&quot;,&#xd;
    &quot;currency&quot;: &quot;USD&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-483202528">&quot;Cancellation request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">8000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Wait" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">120000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_Subscription_OrderID_Cancel" enabled="true">
                <stringProp name="TestPlan.comments">existing hpid, client Id</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders/A${Order_ID}/subscriptions</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="state" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="920709644">&quot;state&quot;:&quot;CANCELLED&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="autoRenewal" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1400509572">&quot;autoRenewal&quot;:false</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancellationRequestDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="446166954">&quot;cancellationRequestDate&quot;:&quot;${Cancel_Date}T23:00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancelledDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647022123">&quot;cancelledDate&quot;:&quot;&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">52</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_BRIM_SubscriptionCancel" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">commerce-controller/internal/v1/orders/A${Order_ID}?operationName=SubscriptionCancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_Cancel_WPS</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;Subscription (.*?) cancelled successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_Cancel_WPS</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="operation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="403002371">&quot;operation&quot;:&quot;Cancel&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1330931278">&quot;Name\&quot;:\&quot;CANC_REASON\&quot;,\&quot;Value\&quot;:\&quot;Z011\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SubscriptionContractChangeProcessType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="54421074">&quot;SubscriptionContractChangeProcessType\&quot;:\&quot;CANCEL\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_WPS</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_WPS&quot;)
def storedID = vars.get(&quot;C_Txn_ID_Cancel_WPS&quot;)
log.info(&quot;extratcted C_Txn_ID_Cancel&quot; + extractedID)
log.info(&quot;stored C_Txn_ID_Cancel&quot; + storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus-\events" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-599074956">&quot;Subscription ${C_Ext_Ref_ID_Cancel_WPS} cancelled successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WPS_Email Status-Cancellation- GekkoCancelWOFees - ${Send_email_wps}&quot;" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">gekko-notification/internal/v1/notifications/fetch-mail-status-data</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="orderId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">A${Order_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">orderId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Assertion -CancelEvent-New" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-694324980">&quot;emailId&quot;:&quot;${Send_email_wps}&quot;,&quot;subcriptionId&quot;:${C_Subscription_ID_AMEX},&quot;orderId&quot;:&quot;A${Order_ID}&quot;,&quot;status&quot;:&quot;SENT&quot;,&quot;hpId&quot;:&quot;A${Customer_HPID}&quot;,&quot;eventType&quot;:&quot;GekkoCancelWOFees&quot;,&quot;mhEventsUUID&quot;:&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SMF" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SMF_Order_Creation" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SMF_Order_Create_Monthly" enabled="true">
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;orderId&quot;: &quot;SFM01${Order_ID}&quot;,&#xd;
    &quot;country&quot;: &quot;US&quot;,&#xd;
    &quot;sourceSystem&quot;:&quot;USSTORE&quot;, &#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;items&quot;: [&#xd;
        {&#xd;
            &quot;productName&quot;: &quot;DevRegProduct_${Unique_ID}&quot;,&#xd;
            &quot;sku&quot;: &quot;U41PYSB&quot;,&#xd;
            &quot;quantity&quot;: 1,&#xd;
            &quot;itemId&quot;: &quot;001&quot;,&#xd;
            &quot;subscriptionStartDate&quot;: &quot;${Timestamp}&quot;,&#xd;
		  &quot;type&quot;: &quot;carepack&quot;,							 &#xd;
		  &quot;goodDependent&quot;: false,		&#xd;
		  &quot;evergreen&quot;: true,		&#xd;
            &quot;charge&quot;: {&#xd;
                &quot;price&quot;: 36,&#xd;
                &quot;tax&quot;: 3.20,&#xd;
                &quot;taxNumber&quot;: &quot;2034&quot;,&#xd;
                &quot;date&quot;: &quot;${Timestamp}&quot;&#xd;
            },&#xd;
            &quot;recurringChargeConfig&quot;: {&#xd;
                &quot;frequencyLength&quot;: 1,&#xd;
                &quot;frequencyUnit&quot;: &quot;Month&quot;&#xd;
            },&#xd;
            &quot;orgUnit&quot;: {&#xd;
            	&quot;salesOrganization&quot;: &quot;US11&quot;,&#xd;
            	&quot;distributionChannel&quot;: &quot;${DC}&quot;,&#xd;
            	&quot;division&quot;: &quot;00&quot;&#xd;
       		 },&#xd;
            &quot;promoCode&quot;: &quot;PC-${Unique_ID}&quot;,&#xd;
            &quot;autoRenewal&quot;: true&#xd;
        }&#xd;
    ],&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;hpId&quot;: &quot;SFM01${Customer_HPID}&quot;,&#xd;
        &quot;firstName&quot;: &quot;${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;${LName}&quot;,&#xd;
        &quot;email&quot;: &quot;${Send_email_sf}&quot;,&#xd;
        &quot;locale&quot;: &quot;en&quot;,&#xd;
        &quot;phoneNumber&quot;:&quot;2345112345&quot;,&#xd;
         &quot;extension&quot;:&quot;11&quot;,&#xd;
        &quot;phoneCountryCode&quot;:&quot;+1&quot;&#xd;
    },&#xd;
    &quot;paymentMethod&quot;: {&#xd;
        &quot;details&quot;: {&#xd;
            &quot;type&quot;: &quot;Credit Card&quot;,&#xd;
            &quot;lastFour&quot;: &quot;2002&quot;,&#xd;
            &quot;paymentProcessor&quot;: &quot;${CardType_Discover}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;12/2027&quot;,&#xd;
            &quot;paymentGateway&quot;: &quot;PGS&quot;,&#xd;
            &quot;token&quot;: &quot;${CCToken_Discover}&quot;,&#xd;
            &quot;tokenSignature&quot;: &quot;${CCSignature_Discover}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${FName} ${LName}  @%&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;shipping&quot;: {&#xd;
        &quot;address&quot;: {&#xd;
            &quot;firstName&quot;: &quot;SA${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;SA${LName}&quot;,&#xd;
            &quot;hpId&quot;: &quot;SFM01${Customer_HPID}&quot;,&#xd;
            &quot;address1&quot;: &quot;SFM01${Order_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_SFM01${Order_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;Melrose&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;la&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
            &quot;extension&quot;: &quot;01&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;billingAddress&quot;: {&#xd;
            &quot;firstName&quot;: &quot;BA${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;BA${LName}&quot;,&#xd;
            &quot;address1&quot;: &quot;SFM01${Order_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_SFM01${Order_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;Melrose&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;ny&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
            &quot;extension&quot;: &quot;02&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;           &#xd;
        },&#xd;
    &quot;soldToAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Sold Fname&quot;,&#xd;
        &quot;lastName&quot;: &quot;Sold Lname&quot;,&#xd;
        &quot;address1&quot;: &quot;46 sto/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;fl&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;8765432198&quot;,&#xd;
        &quot;extension&quot;: &quot;03&quot;,&#xd;
        &quot;company&quot;: &quot;STO&quot;&#xd;
    },&#xd;
    &quot;payerAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Payer Fname&quot;,&#xd;
        &quot;lastName&quot;: &quot;Payer Lname&quot;,&#xd;
        &quot;address1&quot;: &quot;46 pay/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;Dallas&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;AR&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;8765432198&quot;,&#xd;
        &quot;extension&quot;: &quot;04&quot;,&#xd;
        &quot;company&quot;: &quot;PAY&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="695991730">Order has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SMF_Order_Deatils_From_BRIM" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SMF_BRIM_ContractAccountCreate" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/SFM01${Order_ID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ContractAccountCreate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - SFM1_C_Subscription_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">SFM1_C_Subscription_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;subscriptionId&quot;:(.*?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found SFM1_C_Subscription_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Contract_Account_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Contract_Account_ID_SFM01</stringProp>
                  <stringProp name="RegexExtractor.regex">Contract Acccount (.*?) created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Contract_Account_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Sold To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_SoldTo_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">Sold To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_SoldTo_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Ship To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_ShipTo_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">Ship To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_ShipTo_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message - Payment Term" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="684398256">&quot;PaymentTerms\&quot;:\&quot;ZCPH\&quot;,\&quot;IncomingPaymentMethod\&quot;:\&quot;C\&quot;,\&quot;AccountDeterminationID\&quot;:\&quot;NB\&quot;,\&quot;EventType\&quot;:\&quot;C\&quot;,\&quot;ContractAccountCategory\&quot;:\&quot;NB\&quot;,\&quot;ContractAccountName\&quot;:\&quot;SFM01${Customer_HPID}\&quot;,\&quot;CompanyCodeGroup\&quot;:\&quot;US11\&quot;,\&quot;StandardCompanyCode\&quot;:\&quot;US11\&quot;,\&quot;InvoiceLanguage\&quot;:\&quot;EN\&quot;,\&quot;PaymentToken\&quot;:\&quot;${CCToken_Discover}\&quot;,\&quot;PaymentSignature\&quot;:\&quot;${CCSignature_Discover}\&quot;,\&quot;PaymentLastFour\&quot;:\&quot;2002\&quot;,\&quot;PaymentExpire\&quot;:\&quot;12/2027\&quot;,\&quot;PaymentType\&quot;:\&quot;${CardType_Discover}\&quot;,\&quot;CardHolderName\&quot;:\&quot;${FName} ${LName}  @%\&quot;,\&quot;PaymentExpirationMonth\&quot;:\&quot;12\&quot;,\&quot;PaymentExpirationYear\&quot;:\&quot;2027\&quot;,\&quot;Currency\&quot;:\&quot;USD\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM_Contract" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="2057661643">&quot;externalSystemName&quot;:&quot;BRIM&quot;</stringProp>
                    <stringProp name="1426913737">{\&quot;ContractAccount\&quot;:{\&quot;BusinessPartner\&quot;:{\&quot;Language\&quot;:\&quot;EN\&quot;,</stringProp>
                    <stringProp name="-1189691830">&quot;OutgoingPaymentMethod\&quot;:\&quot;K\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;0001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;0001\&quot;</stringProp>
                    <stringProp name="1857721038">&quot;statusCodeValue\&quot;:200</stringProp>
                    <stringProp name="-2083664997">&quot;statusCode\&quot;:\&quot;OK\&quot;</stringProp>
                    <stringProp name="-1921517919">Contract Acccount ${C_Contract_Account_ID_SFM01} created successfully</stringProp>
                    <stringProp name="-454823327">Sold To BP ${C_SoldTo_ID} created successfully</stringProp>
                    <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Contract_Account Table" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="13014692">&quot;soldTo&quot;:&quot;${C_SoldTo_ID}&quot;</stringProp>
                    <stringProp name="-1479981304">&quot;shipTo&quot;:&quot;${C_ShipTo_ID}&quot;,</stringProp>
                    <stringProp name="-337590862">&quot;contractAccountId&quot;:&quot;${C_Contract_Account_ID_SFM01}&quot;</stringProp>
                    <stringProp name="-752356610">message=&apos;Sold To BP Classification updated successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">12000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SMF_BRIM_SubscriptionCreate" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/SFM01${Order_ID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SubscriptionCreate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">Provider document (.*?) Created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-789398794">\&quot;ContractAccount\&quot;:\&quot;${C_Contract_Account_ID_SFM01}\&quot;,\&quot;Material\&quot;:\&quot;U41PYSB\&quot;,\&quot;Quantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;},\&quot;PriceComponent\&quot;:{\&quot;ConditionType\&quot;:\&quot;ZSLP\&quot;,\&quot;ConditionRateValue\&quot;:\&quot;36.00\&quot;,\&quot;ConditionCurrency\&quot;:\&quot;USD\&quot;,\&quot;ConditionQuantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;}},\&quot;BillingCycle\&quot;:\&quot;MBS\&quot;,\&quot;Characteristics\&quot;:[{\&quot;Characteristic\&quot;:\&quot;AutoRenewalFlag\&quot;,\&quot;Value\&quot;:\&quot;Y\&quot;},{\&quot;Characteristic\&quot;:\&quot;Licenses\&quot;,\&quot;Value\&quot;:\&quot;1\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingModel\&quot;,\&quot;Value\&quot;:\&quot;SUBS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BusinessModel\&quot;,\&quot;Value\&quot;:\&quot;SAAS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingType\&quot;,\&quot;Value\&quot;:\&quot;ADV\&quot;},{\&quot;Characteristic\&quot;:\&quot;ChargeType\&quot;,\&quot;Value\&quot;:\&quot;RECURRING\&quot;}]}],\&quot;OriginalSourceSystem\&quot;:\&quot;USSTORE\&quot;}&quot;</stringProp>
                    <stringProp name="1857721039">&quot;statusCodeValue\&quot;:201</stringProp>
                    <stringProp name="-1585296843">&quot;statusCode\&quot;:\&quot;CREATED\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-TransactionID" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID&quot;)
def storedID = vars.get(&quot;C_Txn_ID&quot;)
log.info(&quot;extratcted Txn_ID&quot; +extractedID)
log.info(&quot;stored Txn_ID&quot; +storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-\events" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                    <stringProp name="-997691214">&quot;Provider document ${C_Ext_Ref_ID} Created successfully</stringProp>
                    <stringProp name="1194791410">\&quot;ContractAccountID\&quot;:\&quot;${C_Contract_Account_ID_SFM01}\&quot;,\&quot;SubscriptionContractItem\&quot;:\&quot;000010\&quot;,\&quot;Material\&quot;:\&quot;U41PYSB\&quot;,</stringProp>
                    <stringProp name="1519147493">&quot;OriginalSourceSystem\&quot;:\&quot;${sourcesystem}\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Subscription Table" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1532934022">&quot;externalRefId&quot;:&quot;${C_Ext_Ref_ID}&quot;</stringProp>
                    <stringProp name="-631002258">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Order_Info" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-943514902">&quot;shippingInfo&quot;:&quot;{\&quot;address\&quot;:{\&quot;firstName\&quot;:\&quot;SA${FName}\&quot;,\&quot;lastName\&quot;:\&quot;SA${LName}\&quot;,\&quot;address1\&quot;:\&quot;SFM01${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_SFM01${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;LA\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;01\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;SFM01${Customer_HPID}\&quot;}}&quot;,</stringProp>
                    <stringProp name="268148317">&quot;paymentMethod&quot;:&quot;{\&quot;details\&quot;:{\&quot;type\&quot;:\&quot;Credit Card\&quot;,\&quot;lastFour\&quot;:\&quot;2002\&quot;,\&quot;paymentProcessor\&quot;:\&quot;${CardType_Discover}\&quot;,\&quot;expiryDate\&quot;:\&quot;12/2027\&quot;,\&quot;paymentGateway\&quot;:\&quot;PGS\&quot;,\&quot;token\&quot;:\&quot;${CCToken_Discover}\&quot;,\&quot;tokenSignature\&quot;:\&quot;${CCSignature_Discover}\&quot;,\&quot;cardHolderName\&quot;:\&quot;${FName} ${LName}  @%\&quot;</stringProp>
                    <stringProp name="-162755238">&quot;billingAddress&quot;:&quot;{\&quot;firstName\&quot;:\&quot;BA${FName}\&quot;,\&quot;lastName\&quot;:\&quot;BA${LName}\&quot;,\&quot;address1\&quot;:\&quot;SFM01${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_SFM01${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;NY\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;02\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;SFM01${Customer_HPID}\&quot;}</stringProp>
                    <stringProp name="-1764398874">&quot;orderStatus&quot;:&quot;CREATED&quot;</stringProp>
                    <stringProp name="642361988">&quot;clientId&quot;:&quot;${ClientID}&quot;</stringProp>
                    <stringProp name="-1408991202">&quot;customerHpId&quot;:&quot;SFM01${Customer_HPID}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sourcesystem" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">sourcesystem</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;OriginalSourceSystem\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.default"></stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">2</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">12000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SMF_Cancel_Subscription" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SMF_Cancel_Subscription" enabled="true">
                <stringProp name="TestPlan.comments">select subscription_id,customer_hp_id from subscription;</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/customers/SFM01${Customer_HPID}/subscriptions/${SFM1_C_Subscription_ID}/cancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;cancelledAt&quot;: &quot;${Cancel_Date}T23:00:00+00:00&quot;,&#xd;
  &quot;externalRef&quot;: &#xd;
  [&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;R order Num&quot;,&#xd;
      &quot;value&quot;: &quot;Cancel the order&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-483202528">&quot;Cancellation request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">60000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Wait" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">120000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SMF_GET_Subscription_OrderID_Cancel" enabled="true">
                <stringProp name="TestPlan.comments">existing hpid, client Id</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders/SFM01${Order_ID}/subscriptions</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="state" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="920709644">&quot;state&quot;:&quot;CANCELLED&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="autoRenewal" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1400509572">&quot;autoRenewal&quot;:false</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancellationRequestDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="446166954">&quot;cancellationRequestDate&quot;:&quot;${Cancel_Date}T23:00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancelledDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647022123">&quot;cancelledDate&quot;:&quot;&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">52</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SMF_GET_API_BRIM_SubscriptionCancel" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">commerce-controller/internal/v1/orders/SFM01${Order_ID}?operationName=SubscriptionCancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_Cancel_SMF</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;Subscription (.*?) cancelled successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_Cancel_SMF</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="operation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="403002371">&quot;operation&quot;:&quot;Cancel&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1330931278">&quot;Name\&quot;:\&quot;CANC_REASON\&quot;,\&quot;Value\&quot;:\&quot;Z011\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SubscriptionContractChangeProcessType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="54421074">&quot;SubscriptionContractChangeProcessType\&quot;:\&quot;CANCEL\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_SMF</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_SMF&quot;)
def storedID = vars.get(&quot;C_Txn_ID_Cancel_SMF&quot;)
log.info(&quot;extratcted C_Txn_ID_Cancel&quot; + extractedID)
log.info(&quot;stored C_Txn_ID_Cancel&quot; + storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus-\events" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="990294534">&quot;Subscription ${C_Ext_Ref_ID_Cancel_SMF} cancelled successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MessageHub Email Status-Cancel-Today&apos;sDate" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">gekko-notification/internal/v1/notifications/fetch-mail-status-data</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="orderId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SFM01${Order_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">orderId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="GekkoCancelWOFees" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="29400703">&quot;emailId&quot;:&quot;${Send_email_sf}&quot;,&quot;subcriptionId&quot;:${SFM1_C_Subscription_ID},&quot;orderId&quot;:&quot;SFM01${Order_ID}&quot;,&quot;status&quot;:&quot;SENT&quot;,&quot;hpId&quot;:&quot;SFM01${Customer_HPID}&quot;,&quot;eventType&quot;:&quot;GekkoCancelWOFees&quot;,&quot;mhEventsUUID&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="GekkoWelcome" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1789849081">&quot;eventType&quot;:&quot;GekkoWelcome&quot;</stringProp>
                    <stringProp name="573320596">&quot;status&quot;:&quot;SENT&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CP" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CP_Order_Creation" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_CarepackOrder" enabled="true">
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/api/commerce-controller/orders</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;orderId&quot;: &quot;${CPCFEOrder_ID}&quot;,&#xd;
    &quot;country&quot;: &quot;US&quot;,&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;sourceSystem&quot;: &quot;usstore&quot;,&#xd;
    &quot;items&quot;: [&#xd;
        {&#xd;
        &quot;itemId&quot;: &quot;001&quot;,&#xd;
        &quot;productName&quot;: &quot;HP1Yr WolfPro SecurityLicense Subs E-LTU&quot;,&#xd;
        &quot;sku&quot;: &quot;U43CRSB&quot;,&#xd;
        &quot;type&quot;:&quot;carepack&quot;,&#xd;
        &quot;goodDependent&quot;:&quot;true&quot;,&#xd;
        &quot;hwSku&quot;: [&#xd;
                &quot;36D33UT#ABA&quot;],&#xd;
			  &#xd;
        &quot;quantity&quot;: 1,&#xd;
        &quot;hwShippingDurationDays&quot;: 0,&#xd;
        &quot;charge&quot;: {&#xd;
            &quot;price&quot;: 5.99,&#xd;
            &quot;tax&quot;: 2,&#xd;
            &quot;date&quot;: &quot;${Timestamp}&quot;&#xd;
            },&#xd;
        &quot;orgUnit&quot;: {&#xd;
            &quot;salesOrganization&quot;: &quot;US11&quot;,&#xd;
            &quot;distributionChannel&quot;: &quot;10&quot;,&#xd;
            &quot;division&quot;: &quot;00&quot;&#xd;
            },&#xd;
         &quot;promoCode&quot;: &quot;null&quot;,&#xd;
         &quot;autoRenewal&quot;: true,&#xd;
         &quot;subscriptionStartDate&quot;: &quot;${Timestamp}&quot;,&#xd;
            &quot;recurringChargeConfig&quot;: {&#xd;
                &quot;frequencyLength&quot;: 1,&#xd;
                &quot;frequencyUnit&quot;: &quot;Month&quot;&#xd;
            }&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;hpId&quot;: &quot;CPCFE${Customer_HPID}&quot;,&#xd;
        &quot;firstName&quot;: &quot;${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;${LName}&quot;,&#xd;
        &quot;email&quot;: &quot;${CP_Send_email}&quot;,&#xd;
        &quot;locale&quot;: &quot;en&quot;,&#xd;
		&quot;phoneNumber&quot;:&quot;2345112345&quot;,&#xd;
        &quot;extension&quot;:&quot;11&quot;,&#xd;
        &quot;phoneCountryCode&quot;:&quot;+1&quot;&#xd;
    },&#xd;
    &quot;paymentMethod&quot;: {&#xd;
        &quot;details&quot;: {&#xd;
            &quot;type&quot;: &quot;Credit Card&quot;,&#xd;
            &quot;lastFour&quot;: &quot;1234&quot;,&#xd;
            &quot;paymentProcessor&quot;: &quot;${CardType_MasterCard}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;12/2027&quot;,&#xd;
            &quot;paymentGateway&quot;: &quot;PGS&quot;,&#xd;
            &quot;token&quot;: &quot;${CCToken_MasterCard}&quot;,&#xd;
            &quot;tokenSignature&quot;: &quot;${CCSignature_MasterCard}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${FName} ${LName}&quot;&#xd;
        }&#xd;
    },&#xd;
     &quot;shipping&quot;: {&#xd;
        &quot;address&quot;: {&#xd;
            &quot;firstName&quot;: &quot;SH${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;SH${LName}&quot;,&#xd;
            &quot;address1&quot;: &quot;${CPCFEOrder_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_${CPCFEOrder_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;Melrose&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;CA&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
            &quot;extension&quot;: &quot;1122&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
            &quot;hpId&quot;: &quot;CPCFE${Customer_HPID}&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;billingAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;BI${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;BI${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;${CPCFEOrder_ID} b/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 billing_${CPCFEOrder_ID}&quot;,&#xd;
        &quot;city&quot;: &quot;Phoenix&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;CA&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;85001&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
        &quot;extension&quot;: &quot;1122&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
        &quot;hpId&quot;: &quot;CPCFE${Customer_HPID}&quot;&#xd;
	  },&#xd;
    &quot;soldToAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;SO${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;SO${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;${CPCFEOrder_ID} sh/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe ${CPCFEOrder_ID}&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;nj&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;2345112345&quot;,&#xd;
        &quot;extension&quot;: &quot;112111&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko &quot;&#xd;
    },&#xd;
    &quot;payerAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;PA${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;PA${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;${CPCFEOrder_ID} sh/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe ${CPCFEOrder_ID}&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;oh&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;2345112345&quot;,&#xd;
        &quot;extension&quot;: &quot;112111&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko &quot;						   &#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="695991730">Order has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_Update_BIFile" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

//// Get the variable(s) from the JMeter script
Orderdate = vars.get(&quot;Timestamp&quot;);
OrderID = vars.get(&quot;CPCFEOrder_ID&quot;);
Shipdate = vars.get(&quot;Timestamp&quot;);
Serialnumber  = vars.get(&quot;SrNumber1&quot;);
EstDate = vars.get(&quot;CancelFee_StartDate&quot;);

def path = FileServer.getFileServer().getBaseDir();
// Open File(s)
f = new FileOutputStream(path+&apos;/Carepacks_Dataparser_Cancellation_Fee.csv&apos;, true); 
p = new PrintStream(f); 

// Write data to file 
p.println(&quot;ORDER_DATE,ORDER_NUMBER,SHIP_DATE,PRODUCT_LINE,PRODUCT_NUMBER,HARDWARE_SKU,PRODUCT_DESCRIPTION,SERIAL_NUMBER,ESTIMATED_DELIVERY_DATE&quot;);
p.println(Orderdate+&quot;,&quot;+OrderID+&quot;,&quot;+Shipdate+&quot;,MG,U43CRSB,36D33UT#ABA,HP 3y NBDOnsite NB Only SVC@%&amp;,&quot;+Serialnumber+&quot;,&quot;+EstDate);

// Close File(s)
p.close();f.close();</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data_Parser_Carepack" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">data-parser/internal/v1/upload/${ClientID}?action=carepack</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}/Carepacks_Dataparser_Cancellation_Fee.csv" elementType="HTTPFileArg">
                      <stringProp name="File.path">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}/Carepacks_Dataparser_Cancellation_Fee.csv</stringProp>
                      <stringProp name="File.paramname">file</stringProp>
                      <stringProp name="File.mimetype">text/csv</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Uploaded the file successfully" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1499260160">Uploaded the file successfully: Carepacks_Dataparser_Cancellation_Fee.csv</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_Delete the CSV" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script"> import org.apache.jmeter.services.FileServer;
 
def path1 = FileServer.getFileServer().getBaseDir();
 String customers = path1+&apos;/Carepacks_Dataparser_Cancellation_Fee.csv&apos;;

 try {

  File file = new File(customers);

  if (file.delete()) {
   System.out.println(file.getName() + &quot; is deleted!&quot;);
  } else {
   System.out.println(&quot;Delete operation has failed!&quot;);
  }
 } catch (Exception e) {
  e.printStackTrace();
 }</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2524">OK</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CP_Order_Deatils_From_BRIM" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Pause 1.5 min" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">90000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CP_BRIM_ContractAccountCreate" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/${CPCFEOrder_ID}?operationName=ContractAccountCreate</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - C_Subscription_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Subscription_ID_CP</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;subscriptionId&quot;:(.*?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Subscription_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Contract_Account_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Contract_Account_ID_CP</stringProp>
                  <stringProp name="RegexExtractor.regex">Contract Acccount (.*?) created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Contract_Account_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Sold To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_SoldTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">Sold To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_SoldTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Ship To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_ShipTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">Ship To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_ShipTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(?i)(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Contract_Account_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-752356610">message=&apos;Sold To BP Classification updated successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="contract_Account-soldTo" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.soldTo</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_SoldTo_ID_CPSTD}&quot;</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="contract_Account-shipTo" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.shipTo</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_ShipTo_ID_CPSTD}&quot;
</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Contract_Account - Contract Account Id" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.contractAccountId</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_Contract_Account_ID_CP}&quot;</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract_Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract - External System" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2057661643">&quot;externalSystemName&quot;:&quot;BRIM&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Lanuage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1426913737">{\&quot;ContractAccount\&quot;:{\&quot;BusinessPartner\&quot;:{\&quot;Language\&quot;:\&quot;EN\&quot;,</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Payment Terms" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1377136555">&quot;PaymentTerms\&quot;:\&quot;ZCPB\&quot;,\&quot;IncomingPaymentMethod\&quot;:\&quot;M\&quot;,\&quot;OutgoingPaymentMethod\&quot;:\&quot;N\&quot;,\&quot;InvoiceScheduling\&quot;:\&quot;\&quot;,\&quot;Currency\&quot;:\&quot;USD\&quot;,\&quot;CorrespondenceVariant\&quot;:\&quot;NB01\&quot;,\&quot;CorrespondenceType\&quot;:\&quot;\&quot;,\&quot;CorrespondenceRecipient\&quot;:\&quot;\&quot;,\&quot;AccountDeterminationId\&quot;:\&quot;NB\&quot;,\&quot;EventType\&quot;:\&quot;\&quot;,\&quot;ContractAccountCategory\&quot;:\&quot;NB\&quot;,\&quot;ContractAccountName\&quot;:\&quot;CPCFE${Customer_HPID}\&quot;,\&quot;ContractAccountId\&quot;:\&quot;${C_Contract_Account_ID_CP}\&quot;,\&quot;CompanyCodeGroup\&quot;:\&quot;US11\&quot;,\&quot;StandardCompanyCode\&quot;:\&quot;US11\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;000001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;000001\&quot;,\&quot;BillingCycle\&quot;:\&quot;\&quot;,\&quot;InvoiceLock\&quot;:\&quot;\&quot;,\&quot;FormDetermination\&quot;:\&quot;\&quot;,\&quot;InvoiceLanguage\&quot;:\&quot;\&quot;,\&quot;PaymentToken\&quot;:\&quot;53EEAD0DF7314CF29A30BE05ACF7B2534444\&quot;,\&quot;PaymentSignature\&quot;:\&quot;CB81EFB5430B472ABF22E5CD0F118603\&quot;,\&quot;PaymentLastFour\&quot;:\&quot;1234\&quot;,\&quot;PaymentExpirationMonth\&quot;:\&quot;12\&quot;,\&quot;PaymentExpirationYear\&quot;:\&quot;2027\&quot;,\&quot;PaymentType\&quot;:\&quot;002\&quot;,\&quot;CardHolderName\&quot;:\&quot;${FName} ${LName}\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Outgoing Payment Method" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1200026982">&quot;NB01\&quot;,\&quot;OutgoingPaymentMethod\&quot;:\&quot;N\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;0001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;0001\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1857721038">&quot;statusCodeValue\&quot;:200</stringProp>
                    <stringProp name="-2083664997">&quot;statusCode\&quot;:\&quot;OK\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Contract Account ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="275907947">Contract Acccount ${C_Contract_Account_ID_CP} created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Sold TO" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="928468312">Sold To BP ${C_SoldTo_ID_CPSTD} created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-DC" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-DC" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_hwShippingDurationDays" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1671343792">hwShippingDurationDays&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_itemType - carepack" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1396539837">&quot;itemType&quot;:&quot;carepack&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CP_BRIM_SubscriptionCreate" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/${CPCFEOrder_ID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SubscriptionCreate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">Provider document (.*?) Created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_CPSTD</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract ReferenceID_CPSTD</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sourcesystem" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">sourcesystem</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;OriginalSourceSystem\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.default"></stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">2</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM - Contract_Account_ID_CPSTD" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-395829927">&quot;ContractAccount\&quot;:\&quot;${C_Contract_Account_ID_CP}\&quot;,\&quot;Material\&quot;:\&quot;U43CRSB\&quot;,\&quot;Quantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;},\&quot;PriceComponent\&quot;:{\&quot;ConditionType\&quot;:\&quot;ZSLP\&quot;,\&quot;ConditionRateValue\&quot;:\&quot;5.99\&quot;,\&quot;ConditionCurrency\&quot;:\&quot;USD\&quot;,\&quot;ConditionQuantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;}},\&quot;BillingCycle\&quot;:\&quot;MBS\&quot;,\&quot;Characteristics\&quot;:[{\&quot;Characteristic\&quot;:\&quot;AutoRenewalFlag\&quot;,\&quot;Value\&quot;:\&quot;Y\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingModel\&quot;,\&quot;Value\&quot;:\&quot;SUBS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BusinessModel\&quot;,\&quot;Value\&quot;:\&quot;SAAS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingType\&quot;,\&quot;Value\&quot;:\&quot;ADV\&quot;},{\&quot;Characteristic\&quot;:\&quot;ChargeType\&quot;,\&quot;Value\&quot;:\&quot;RECURRING\&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM - statusCodeValue" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1857721039">&quot;statusCodeValue\&quot;:201</stringProp>
                    <stringProp name="-1585296843">&quot;statusCode\&quot;:\&quot;CREATED\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-TransactionID" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_CPSTD&quot;)
def storedID = vars.get(&quot;C_Txn_ID_CPSTD&quot;)
log.info(&quot;extratcted one&quot; +extractedID)
log.info(&quot;stored one&quot; +storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - Ext_Ref_ID_CPSTD" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="552444649">&quot;Provider document ${C_Ext_Ref_ID_CPSTD} Created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - Contract_Account_ID_CPSTD" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="772265236">&quot;ContractAccountID\&quot;:\&quot;${C_Contract_Account_ID_CP}\&quot;,\&quot;SubscriptionContractItem\&quot;:\&quot;000010\&quot;,\&quot;Material\&quot;:\&quot;U43CRSB\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - OriginalSourceSystem" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1519147493">&quot;OriginalSourceSystem\&quot;:\&quot;${sourcesystem}\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Subscription Table - externalRefId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1413704317">&quot;externalRefId&quot;:&quot;${C_Ext_Ref_ID_CPSTD}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Subscription Table - DistributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-631002258">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="order Info" enabled="true">
                  <stringProp name="JSON_PATH">$[0].order_Info</stringProp>
                  <stringProp name="EXPECTED_VALUE">{&quot;errorTimestamp&quot;:null,&quot;clientId&quot;:&quot;${ClientID}&quot;,&quot;customerHpId&quot;:&quot;CPCFE${Customer_HPID}&quot;,&quot;errorInformation&quot;:null,&quot;shippingInfo&quot;:&quot;{\&quot;address\&quot;:{\&quot;firstName\&quot;:\&quot;SH${FName}\&quot;,\&quot;lastName\&quot;:\&quot;SH${LName}\&quot;,\&quot;address1\&quot;:\&quot;${CPCFEOrder_ID} sh\/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_${CPCFEOrder_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;CA\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;CPCFE${Customer_HPID}\&quot;}}&quot;,&quot;paymentMethod&quot;:&quot;{\&quot;details\&quot;:{\&quot;type\&quot;:\&quot;Credit Card\&quot;,\&quot;lastFour\&quot;:\&quot;1234\&quot;,\&quot;paymentProcessor\&quot;:\&quot;002\&quot;,\&quot;expiryDate\&quot;:\&quot;12\/2027\&quot;,\&quot;paymentGateway\&quot;:\&quot;PGS\&quot;,\&quot;token\&quot;:\&quot;53eead0df7314cf29a30be05acf7b2534444\&quot;,\&quot;tokenSignature\&quot;:\&quot;cb81efb5430b472abf22e5cd0f118603\&quot;,\&quot;cardHolderName\&quot;:\&quot;${FName} ${LName}\&quot;,\&quot;poNumber\&quot;:null,\&quot;paymentTerm\&quot;:null}}&quot;,&quot;orderStatus&quot;:&quot;CREATED&quot;,&quot;billingAddress&quot;:&quot;{\&quot;firstName\&quot;:\&quot;BI${FName}\&quot;,\&quot;lastName\&quot;:\&quot;BI${LName}\&quot;,\&quot;address1\&quot;:\&quot;${CPCFEOrder_ID} b\/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;1\/1 billing_${CPCFEOrder_ID}\&quot;,\&quot;city\&quot;:\&quot;Phoenix\&quot;,\&quot;stateProvince\&quot;:\&quot;CA\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;85001\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;CPCFE${Customer_HPID}\&quot;}&quot;,&quot;externalRef&quot;:&quot;null&quot;}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CP_DistributionChannel-OrderInfoTable" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/${CPCFEOrder_ID}/distributionChannelDetails</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="salesOrganization" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="division" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="distributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CP_DistributionChannel-SubsTable" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/subscriptions/${C_Subscription_ID_CP}/distributionChannelDetails</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="subscriptionId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1843351945">&quot;subscriptionId&quot;:${C_Subscription_ID_CP}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="salesOrganization" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="division" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="distributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CP_Cancel_Subscription" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CP_Cancel_Subscription" enabled="true">
                <stringProp name="TestPlan.comments">select subscription_id,customer_hp_id from subscription;  CP${Customer_HPID} ${CP_Subscription_ID}</stringProp>
                <stringProp name="HTTPSampler.proxyScheme">http</stringProp>
                <stringProp name="HTTPSampler.proxyHost">web-proxy.in.hpicorp.net</stringProp>
                <intProp name="HTTPSampler.proxyPort">8080</intProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">api/customers/CPCFE${Customer_HPID}/subscriptions/${C_Subscription_ID_CP}/cancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"> {&#xd;
  &quot;cancelledAt&quot;: &quot;${CurrentCancelDate}T23:00:00+00:00&quot;,&#xd;
  &quot;externalRef&quot;: &#xd;
  [&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;R Order Num&quot;,&#xd;
      &quot;value&quot;: &quot;Cancel Subscription&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-483202528">&quot;Cancellation request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Wait" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">12000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CP_Subscription_OrderID_Cancel" enabled="true">
                <stringProp name="TestPlan.comments">existing hpid, client Id</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders/${CPCFEOrder_ID}/subscriptions</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="state" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="920709644">&quot;state&quot;:&quot;CANCELLED&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="autoRenewal" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1400509572">&quot;autoRenewal&quot;:false</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancellationRequestDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="446166954">&quot;cancellationRequestDate&quot;:&quot;${Cancel_Date}T23:00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancelledDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647022123">&quot;cancelledDate&quot;:&quot;&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">52</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CP_BRIM_SubscriptionCancel" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">commerce-controller/internal/v1/orders/${CPCFEOrder_ID}?operationName=SubscriptionCancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_Cancel_CP</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;Subscription (.*?) cancelled successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID_Cancel_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_Cancel_CP</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID_CPSTD" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_CP</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="operation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="403002371">&quot;operation&quot;:&quot;Cancel&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1330931278">&quot;Name\&quot;:\&quot;CANC_REASON\&quot;,\&quot;Value\&quot;:\&quot;Z011\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SubscriptionContractChangeProcessType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="54421074">&quot;SubscriptionContractChangeProcessType\&quot;:\&quot;CANCEL\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_CP&quot;)
def storedID = vars.get(&quot;C_Txn_ID_Cancel_CP&quot;)
log.info(&quot;extratcted C_Txn_ID_Cancel&quot; + extractedID)
log.info(&quot;stored C_Txn_ID_Cancel&quot; + storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus-\events" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1623543461">&quot;Subscription ${C_Ext_Ref_ID_Cancel_CP} cancelled successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">8000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MessageHub-Cancel-GekkoCancelWFees${CP_Send_email}" enabled="true">
                <stringProp name="TestPlan.comments">PaymentReminder Email</stringProp>
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">gekko-notification/internal/v1/notifications/fetch-mail-status-data</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="orderId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CPCFEOrder_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">orderId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="GekkoCancelWFees" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="517562737">&quot;eventType&quot;:&quot;GekkoCancelWFees&quot;</stringProp>
                    <stringProp name="573320596">&quot;status&quot;:&quot;SENT&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="GekkoWelcome" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1789849081">&quot;eventType&quot;:&quot;GekkoWelcome&quot;</stringProp>
                    <stringProp name="573320596">&quot;status&quot;:&quot;SENT&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">120000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CPSTD" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CPSTD_Order_Creation" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MD001_TC001_Order_Create_CarePack_Stand_alone" enabled="true">
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;orderId&quot;: &quot;CPSTD${Order_ID}&quot;,&#xd;
    &quot;country&quot;: &quot;US&quot;,&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;items&quot;: [&#xd;
        {&#xd;
            &quot;itemId&quot;: &quot;1&quot;,&#xd;
            &quot;productName&quot;: &quot;HP1Yr carepack&quot;,&#xd;
            &quot;sku&quot;: &quot;U43CRSB&quot;,&#xd;
            &quot;type&quot;: &quot;carepack&quot;,&#xd;
            &quot;goodDependent&quot;:&quot;true&quot;,&#xd;
            &quot;evergreen&quot;:&quot;true&quot;,&#xd;
            &quot;hwSku&quot;: [&#xd;
                &quot;36D33UT#ABA&quot;&#xd;
            ],&#xd;
            &quot;hwSerialNumber&quot;: &quot;${CPSTD_HW_SR_NO}&quot;,&#xd;
            &quot;hwShippingDurationDays&quot;: 5,&#xd;
            &quot;quantity&quot;: 1,&#xd;
            &quot;charge&quot;: {&#xd;
                &quot;price&quot;: 0.12,&#xd;
                &quot;tax&quot;: 20.53,&#xd;
                &quot;date&quot;: &quot;${Timestamp}&quot;&#xd;
            },&#xd;
            &quot;recurringChargeConfig&quot;: {&#xd;
                &quot;frequencyLength&quot;: 1,&#xd;
                &quot;frequencyUnit&quot;: &quot;Month&quot;&#xd;
            },&#xd;
            &quot;orgUnit&quot;: {&#xd;
                &quot;salesOrganization&quot;: &quot;US11&quot;,&#xd;
                &quot;distributionChannel&quot;: &quot;${DC}&quot;,&#xd;
                &quot;division&quot;: &quot;00&quot;&#xd;
            },&#xd;
            &quot;promoCode&quot;: &quot;PC-${Unique_ID}&quot;,&#xd;
            &quot;autoRenewal&quot;: true,&#xd;
            &quot;subscriptionStartDate&quot;: &quot;${Timestamp}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;hpId&quot;: &quot;CPSTD${Customer_HPID}&quot;,&#xd;
        &quot;firstName&quot;: &quot;${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;${LName}&quot;,&#xd;
        &quot;email&quot;: &quot;${Send_email_cpstd}&quot;,&#xd;
        &quot;locale&quot;: &quot;en&quot;,&#xd;
        &quot;phoneNumber&quot;:&quot;2345112345&quot;,&#xd;
        &quot;extension&quot;:&quot;11&quot;,&#xd;
        &quot;phoneCountryCode&quot;:&quot;+1&quot;&#xd;
    },&#xd;
    &quot;paymentMethod&quot;: {&#xd;
        &quot;details&quot;: {&#xd;
            &quot;type&quot;: &quot;Credit Card&quot;,&#xd;
            &quot;lastFour&quot;: &quot;2002&quot;,&#xd;
            &quot;paymentProcessor&quot;: &quot;${CardType_MasterCard}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;12/2023&quot;,&#xd;
            &quot;paymentGateway&quot;: &quot;PGS&quot;,&#xd;
            &quot;token&quot;: &quot;${CCToken_MasterCard}&quot;,&#xd;
            &quot;tokenSignature&quot;: &quot;${CCSignature_MasterCard}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${FName} ${LName}&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;shipping&quot;: {&#xd;
        &quot;address&quot;: {&#xd;
            &quot;firstName&quot;: &quot;CPSTD${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;CPSTD${LName}&quot;,&#xd;
            &quot;address1&quot;: &quot;${Order_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_${Order_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;New York&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;AZ&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;2345112345&quot;,&#xd;
            &quot;extension&quot;: &quot;1121&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
		  &quot;hpId&quot;: &quot;CPSTD${Customer_HPID}&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;billingAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;CPSTD${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;CPSTD${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;${Order_ID} sh/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;sh_address_${Order_ID}&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;AR&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;2345112345&quot;,&#xd;
        &quot;extension&quot;: &quot;112111&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko &quot;,&#xd;
	   &quot;hpId&quot;: &quot;CPSTD${Customer_HPID}&quot;&#xd;
    },&#xd;
    &quot;soldToAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;SoldTO${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;SoldTO${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;441 sh/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;AR&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;2345112345&quot;,&#xd;
        &quot;extension&quot;: &quot;112111&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko &quot;&#xd;
    },&#xd;
    &quot;payerAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Payer ${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;Payer ${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;441 sh/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;AR&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;2345112345&quot;,&#xd;
        &quot;extension&quot;: &quot;112111&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko &quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="695991730">Order has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CPSTD_Order_Deatils_From_BRIM" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">120000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_BRIM_ContractAccountCreate" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/CPSTD${Order_ID}?operationName=ContractAccountCreate</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - C_Subscription_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Subscription_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;subscriptionId&quot;:(.*?),</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Subscription_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Contract_Account_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Contract_Account_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">Contract Acccount (.*?) created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Contract_Account_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Sold To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_SoldTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">Sold To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_SoldTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Ship To BP ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_ShipTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">Ship To BP (.*?) created successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_ShipTo_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(?i)(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Contract_Account_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-752356610">message=&apos;Sold To BP Classification updated successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="contract_Account-soldTo" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.soldTo</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_SoldTo_ID_CPSTD}&quot;</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="contract_Account-shipTo" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.shipTo</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_ShipTo_ID_CPSTD}&quot;
</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Contract_Account - Contract Account Id" enabled="true">
                  <stringProp name="JSON_PATH">$[0].contractAccount.contractAccountId</stringProp>
                  <stringProp name="EXPECTED_VALUE">&quot;${C_Contract_Account_ID_CPSTD}&quot;</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract_Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract - External System" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2057661643">&quot;externalSystemName&quot;:&quot;BRIM&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Lanuage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1426913737">{\&quot;ContractAccount\&quot;:{\&quot;BusinessPartner\&quot;:{\&quot;Language\&quot;:\&quot;EN\&quot;,</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Payment Terms" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1135675085">&quot;PaymentTerms\&quot;:\&quot;ZCPB\&quot;,\&quot;IncomingPaymentMethod\&quot;:\&quot;M\&quot;,\&quot;OutgoingPaymentMethod\&quot;:\&quot;N\&quot;,\&quot;InvoiceScheduling\&quot;:\&quot;\&quot;,\&quot;Currency\&quot;:\&quot;USD\&quot;,\&quot;CorrespondenceVariant\&quot;:\&quot;NB01\&quot;,\&quot;CorrespondenceType\&quot;:\&quot;\&quot;,\&quot;CorrespondenceRecipient\&quot;:\&quot;\&quot;,\&quot;AccountDeterminationId\&quot;:\&quot;NB\&quot;,\&quot;EventType\&quot;:\&quot;\&quot;,\&quot;ContractAccountCategory\&quot;:\&quot;NB\&quot;,\&quot;ContractAccountName\&quot;:\&quot;CPSTD${Customer_HPID}\&quot;,\&quot;ContractAccountId\&quot;:\&quot;${C_Contract_Account_ID_CPSTD}\&quot;,\&quot;CompanyCodeGroup\&quot;:\&quot;US11\&quot;,\&quot;StandardCompanyCode\&quot;:\&quot;US11\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;000001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;000001\&quot;,\&quot;BillingCycle\&quot;:\&quot;\&quot;,\&quot;InvoiceLock\&quot;:\&quot;\&quot;,\&quot;FormDetermination\&quot;:\&quot;\&quot;,\&quot;InvoiceLanguage\&quot;:\&quot;\&quot;,\&quot;PaymentToken\&quot;:\&quot;53EEAD0DF7314CF29A30BE05ACF7B2534444\&quot;,\&quot;PaymentSignature\&quot;:\&quot;CB81EFB5430B472ABF22E5CD0F118603\&quot;,\&quot;PaymentLastFour\&quot;:\&quot;2002\&quot;,\&quot;PaymentExpirationMonth\&quot;:\&quot;12\&quot;,\&quot;PaymentExpirationYear\&quot;:\&quot;2023\&quot;,\&quot;PaymentType\&quot;:\&quot;002\&quot;,\&quot;CardHolderName\&quot;:\&quot;${FName} ${LName}\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Outgoing Payment Method" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1200026982">&quot;NB01\&quot;,\&quot;OutgoingPaymentMethod\&quot;:\&quot;N\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;0001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;0001\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1857721038">&quot;statusCodeValue\&quot;:200</stringProp>
                    <stringProp name="-2083664997">&quot;statusCode\&quot;:\&quot;OK\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Contract Account ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="367816444">Contract Acccount ${C_Contract_Account_ID_CPSTD} created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-Sold TO" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="928468312">Sold To BP ${C_SoldTo_ID_CPSTD} created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-DC" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_Contract-DC" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_hwShippingDurationDays" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1671343787">hwShippingDurationDays&quot;:5</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM_itemType - carepack" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1396539837">&quot;itemType&quot;:&quot;carepack&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_BRIM_SubscriptionCreate" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/CPSTD${Order_ID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SubscriptionCreate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">Provider document (.*?) Created</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_CPSTD</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract ReferenceID_CPSTD</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sourcesystem" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">sourcesystem</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;OriginalSourceSystem\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.default"></stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">2</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM - Contract_Account_ID_CPSTD" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="994796129">&quot;ContractAccount\&quot;:\&quot;${C_Contract_Account_ID_CPSTD}\&quot;,\&quot;Material\&quot;:\&quot;U43CRSB\&quot;,\&quot;Quantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;},\&quot;PriceComponent\&quot;:{\&quot;ConditionType\&quot;:\&quot;ZSLP\&quot;,\&quot;ConditionRateValue\&quot;:\&quot;0.12\&quot;,\&quot;ConditionCurrency\&quot;:\&quot;USD\&quot;,\&quot;ConditionQuantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;}},\&quot;BillingCycle\&quot;:\&quot;MBS\&quot;,\&quot;Characteristics\&quot;:[{\&quot;Characteristic\&quot;:\&quot;AutoRenewalFlag\&quot;,\&quot;Value\&quot;:\&quot;Y\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingModel\&quot;,\&quot;Value\&quot;:\&quot;SUBS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BusinessModel\&quot;,\&quot;Value\&quot;:\&quot;SAAS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingType\&quot;,\&quot;Value\&quot;:\&quot;ADV\&quot;},{\&quot;Characteristic\&quot;:\&quot;ChargeType\&quot;,\&quot;Value\&quot;:\&quot;RECURRING</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="BRIM - statusCodeValue" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1857721039">&quot;statusCodeValue\&quot;:201</stringProp>
                    <stringProp name="-1585296843">&quot;statusCode\&quot;:\&quot;CREATED\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-TransactionID" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_CPSTD&quot;)
def storedID = vars.get(&quot;C_Txn_ID_CPSTD&quot;)
log.info(&quot;extratcted one&quot; +extractedID)
log.info(&quot;stored one&quot; +storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - Ext_Ref_ID_CPSTD" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="552444649">&quot;Provider document ${C_Ext_Ref_ID_CPSTD} Created successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - Contract_Account_ID_CPSTD" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1061364769">&quot;ContractAccountID\&quot;:\&quot;${C_Contract_Account_ID_CPSTD}\&quot;,\&quot;SubscriptionContractItem\&quot;:\&quot;000010\&quot;,\&quot;Material\&quot;:\&quot;U43CRSB\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="events - OriginalSourceSystem" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1519147493">&quot;OriginalSourceSystem\&quot;:\&quot;${sourcesystem}\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Subscription Table - externalRefId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1413704317">&quot;externalRefId&quot;:&quot;${C_Ext_Ref_ID_CPSTD}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Subscription Table - DistributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-631002258">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="order Info" enabled="true">
                  <stringProp name="JSON_PATH">$[0].order_Info</stringProp>
                  <stringProp name="EXPECTED_VALUE">{&quot;errorTimestamp&quot;:null,&quot;clientId&quot;:&quot;${ClientID}&quot;,&quot;customerHpId&quot;:&quot;CPSTD${Customer_HPID}&quot;,&quot;errorInformation&quot;:null,&quot;shippingInfo&quot;:&quot;{\&quot;address\&quot;:{\&quot;firstName\&quot;:\&quot;CPSTD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;CPSTD${LName}\&quot;,\&quot;address1\&quot;:\&quot;${Order_ID} sh\/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;New York\&quot;,\&quot;stateProvince\&quot;:\&quot;AZ\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121-1111\&quot;,\&quot;phoneNumber\&quot;:\&quot;2345112345\&quot;,\&quot;extension\&quot;:\&quot;1121\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;CPSTD${Customer_HPID}\&quot;}}&quot;,&quot;paymentMethod&quot;:&quot;{\&quot;details\&quot;:{\&quot;type\&quot;:\&quot;Credit Card\&quot;,\&quot;lastFour\&quot;:\&quot;2002\&quot;,\&quot;paymentProcessor\&quot;:\&quot;${CardType_MasterCard}\&quot;,\&quot;expiryDate\&quot;:\&quot;12\/2023\&quot;,\&quot;paymentGateway\&quot;:\&quot;PGS\&quot;,\&quot;token\&quot;:\&quot;${CCToken_MasterCard}\&quot;,\&quot;tokenSignature\&quot;:\&quot;${CCSignature_MasterCard}\&quot;,\&quot;cardHolderName\&quot;:\&quot;${FName} ${LName}\&quot;,\&quot;poNumber\&quot;:null,\&quot;paymentTerm\&quot;:null}}&quot;,&quot;orderStatus&quot;:&quot;CREATED&quot;,&quot;billingAddress&quot;:&quot;{\&quot;firstName\&quot;:\&quot;CPSTD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;CPSTD${LName}\&quot;,\&quot;address1\&quot;:\&quot;${Order_ID} sh\/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;New York\&quot;,\&quot;stateProvince\&quot;:\&quot;AR\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121-1111\&quot;,\&quot;phoneNumber\&quot;:\&quot;2345112345\&quot;,\&quot;extension\&quot;:\&quot;112111\&quot;,\&quot;company\&quot;:\&quot;Gekko \&quot;,\&quot;hpId\&quot;:\&quot;CPSTD${Customer_HPID}\&quot;}&quot;,&quot;externalRef&quot;:&quot;null&quot;}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_DistributionChannel-OrderInfoTable" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/CPSTD${Order_ID}/distributionChannelDetails</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="salesOrganization" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="division" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="distributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_DistributionChannel-SubsTable" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/subscriptions/${C_Subscription_ID_CPSTD}/distributionChannelDetails</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="subscriptionId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-155221426">&quot;subscriptionId&quot;:${C_Subscription_ID_CPSTD}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="salesOrganization" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="division" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="distributionChannel" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CPSTD_Cancel_Subscription" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_Cancel_Subscription" enabled="true">
                <stringProp name="TestPlan.comments">select subscription_id,customer_hp_id from subscription;</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/customers/CPSTD${Customer_HPID}/subscriptions/${C_Subscription_ID_CPSTD}/cancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"> {&#xd;
  &quot;cancelledAt&quot;: &quot;${Cancel_Date}T23:00:00+00:00&quot;,&#xd;
  &quot;externalRef&quot;: &#xd;
  [&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;R Order Num&quot;,&#xd;
      &quot;value&quot;: &quot;Cancel Subscription&quot;&#xd;
    }&#xd;
  ],&#xd;
    &quot;cancellationFee&quot;: &quot;99&quot;,&#xd;
    &quot;currency&quot;: &quot;USD&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-483202528">&quot;Cancellation request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">8000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Wait" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">12000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_Subscription_OrderID_Cancel" enabled="true">
                <stringProp name="TestPlan.comments">existing hpid, client Id</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders/CPSTD${Order_ID}/subscriptions</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="state" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="920709644">&quot;state&quot;:&quot;CANCELLED&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="autoRenewal" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1400509572">&quot;autoRenewal&quot;:false</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancellationRequestDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="446166954">&quot;cancellationRequestDate&quot;:&quot;${Cancel_Date}T23:00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancelledDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647022123">&quot;cancelledDate&quot;:&quot;&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">52</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_BRIM_SubscriptionCancel" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">commerce-controller/internal/v1/orders/CPSTD${Order_ID}?operationName=SubscriptionCancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_Cancel_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;Subscription (.*?) cancelled successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID_Cancel_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_Cancel_CPSTD</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID_CPSTD" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_CPSTD</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="operation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="403002371">&quot;operation&quot;:&quot;Cancel&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1330931278">&quot;Name\&quot;:\&quot;CANC_REASON\&quot;,\&quot;Value\&quot;:\&quot;Z011\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SubscriptionContractChangeProcessType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="54421074">&quot;SubscriptionContractChangeProcessType\&quot;:\&quot;CANCEL\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_CPSTD&quot;)
def storedID = vars.get(&quot;C_Txn_ID_Cancel_CPSTD&quot;)
log.info(&quot;extratcted C_Txn_ID_Cancel&quot; + extractedID)
log.info(&quot;stored C_Txn_ID_Cancel&quot; + storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus-\events" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1071254800">&quot;Subscription ${C_Ext_Ref_ID_Cancel_CPSTD} cancelled successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">8000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPSTD_Email Status-Cancellation- GekkoCancelWOFees - ${Send_email_cpstd}" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">gekko-notification/internal/v1/notifications/fetch-mail-status-data</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="orderId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">CPSTD${Order_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">orderId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="&quot;eventType&quot;:&quot;GekkoCancelWFees&quot;" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="895494409">&quot;emailId&quot;:&quot;${Send_email_cpstd}&quot;,&quot;subcriptionId&quot;:${C_Subscription_ID_CPSTD},&quot;orderId&quot;:&quot;CPSTD${Order_ID}&quot;,&quot;status&quot;:&quot;SENT&quot;,&quot;hpId&quot;:&quot;CPSTD${Customer_HPID}&quot;,&quot;eventType&quot;:&quot;GekkoCancelWFees&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="&quot;eventType&quot;:&quot;GekkoWelcome" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1137098351">&quot;emailId&quot;:&quot;${Send_email_cpstd}&quot;,&quot;subcriptionId&quot;:${C_Subscription_ID_CPSTD},&quot;orderId&quot;:&quot;CPSTD${Order_ID}&quot;,&quot;status&quot;:&quot;SENT&quot;,&quot;hpId&quot;:&quot;CPSTD${Customer_HPID}&quot;,&quot;eventType&quot;:&quot;GekkoWelcome&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">8000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WEX"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WEX_Order_Creation" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX-Order_Create_Contract_BRIM_Credit_Card" enabled="true">
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;orderId&quot;: &quot;WEXCC${Order_ID}&quot;,&#xd;
    &quot;country&quot;: &quot;US&quot;,&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;sourceSystem&quot;: &quot;USSTORE&quot;,&#xd;
    &quot;items&quot;: [&#xd;
        {&#xd;
            &quot;itemId&quot;: &quot;001&quot;,&#xd;
            &quot;productName&quot;: &quot;Prod Dev test Gekko_${Unique_ID}&quot;,&#xd;
            &quot;sku&quot;: &quot;U76S2SB&quot;,&#xd;
            &quot;quantity&quot;: 1,&#xd;
            &quot;type&quot;: &quot;wex&quot;,&#xd;
            &quot;charge&quot;: {&#xd;
                &quot;price&quot;: 3,&#xd;
                &quot;tax&quot;: 20.53,&#xd;
                &quot;date&quot;: &quot;${Timestamp}&quot;&#xd;
            },&#xd;
            &quot;recurringChargeConfig&quot;: {&#xd;
                &quot;frequencyLength&quot;: 1,&#xd;
                &quot;frequencyUnit&quot;: &quot;Month&quot;&#xd;
            },&#xd;
            &quot;orgUnit&quot;: {&#xd;
                &quot;salesOrganization&quot;: &quot;US11&quot;,&#xd;
                &quot;distributionChannel&quot;: &quot;${DC}&quot;,&#xd;
                &quot;division&quot;: &quot;00&quot;&#xd;
            },&#xd;
            &quot;promoCode&quot;: &quot;null&quot;,&#xd;
            &quot;autoRenewal&quot;: true,&#xd;
            &quot;subscriptionStartDate&quot;: &quot;${Timestamp}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;hpId&quot;: &quot;WEXCC${Customer_HPID}&quot;,&#xd;
        &quot;soldToBpId&quot;: &quot;${soldToBpId}&quot;,&#xd;
        &quot;shipToBpId&quot;: &quot;${shipToBpId}&quot;,&#xd;
        &quot;firstName&quot;: &quot;${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;${LName}&quot;,&#xd;
        &quot;email&quot;: &quot;${Send_email_wex}&quot;,&#xd;
        &quot;locale&quot;: &quot;en&quot;,&#xd;
        &quot;phoneNumber&quot;:&quot;2345112345&quot;,&#xd;
        &quot;extension&quot;:&quot;11&quot;,&#xd;
        &quot;phoneCountryCode&quot;:&quot;+1&quot;&#xd;
    },&#xd;
    &quot;paymentMethod&quot;: {&#xd;
        &quot;details&quot;: {&#xd;
            &quot;type&quot;: &quot;Credit Card&quot;,&#xd;
            &quot;lastFour&quot;: &quot;1234&quot;,&#xd;
            &quot;paymentProcessor&quot;: &quot;${CardType_AMEX}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;12/2024&quot;,&#xd;
            &quot;paymentGateway&quot;: &quot;PGS&quot;,&#xd;
            &quot;token&quot;: &quot;${CCToken_AMEX}&quot;,&#xd;
            &quot;tokenSignature&quot;: &quot;${CCSignature_AMEX}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${FName} ${LName}  @%&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;shipping&quot;: {&#xd;
        &quot;address&quot;: {&#xd;
            &quot;firstName&quot;: &quot;AD${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;AD${LName}&quot;,&#xd;
            &quot;address1&quot;: &quot;WEXCC${Order_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_WEXCC${Order_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;Melrose&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;la&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
            &quot;extension&quot;: &quot;1122&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
            &quot;hpId&quot;: &quot;WEXCC${Customer_HPID}&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;billingAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;AD${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;AD${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;WEXCC${Order_ID} sh/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;sh_address_WEXCC${Order_ID}&quot;,&#xd;
        &quot;city&quot;: &quot;Melrose&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;ny&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
        &quot;extension&quot;: &quot;1122&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
        &quot;hpId&quot;: &quot;WEXCC${Customer_HPID}&quot;&#xd;
    },&#xd;
    &quot;soldToAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Sold${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;Sold${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;46 sto/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;New York&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;AR&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;8765432198&quot;,&#xd;
        &quot;extension&quot;: &quot;03&quot;,&#xd;
        &quot;company&quot;: &quot;STO&quot;&#xd;
    },&#xd;
    &quot;payerAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;Payer${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;Payer${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;46 pay/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;1/1 sinthe&quot;,&#xd;
        &quot;city&quot;: &quot;Dallas&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;AR&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121-1111&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;8765432198&quot;,&#xd;
        &quot;extension&quot;: &quot;04&quot;,&#xd;
        &quot;company&quot;: &quot;PAY&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="695991730">Order has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX-Order_Create_Contract_BRIM_PO" enabled="true">
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;orderId&quot;: &quot;WEXPO${Order_ID}&quot;,&#xd;
    &quot;country&quot;: &quot;US&quot;,&#xd;
    &quot;currency&quot;: &quot;USD&quot;,&#xd;
    &quot;invoiceEmail&quot;: &quot;${Invoice_Email}&quot;,&#xd;
    &quot;items&quot;: [&#xd;
        {&#xd;
            &quot;productName&quot;: &quot;HP1Yr WolfPro SecurityLicense Subs E-LTU&quot;,&#xd;
            &quot;sku&quot;: &quot;U76S2SB&quot;,&#xd;
            &quot;itemId&quot;: &quot;1&quot;,&#xd;
            &quot;quantity&quot;: 1,&#xd;
            &quot;charge&quot;: {&#xd;
                &quot;price&quot;: 10,&#xd;
                &quot;tax&quot;: 10,&#xd;
                &quot;date&quot;: &quot;${Timestamp}&quot;&#xd;
            },&#xd;
            &quot;orgUnit&quot;: {&#xd;
                &quot;salesOrganization&quot;: &quot;US11&quot;,&#xd;
                &quot;distributionChannel&quot;: &quot;${DC}&quot;,&#xd;
                &quot;division&quot;: &quot;00&quot;&#xd;
            },&#xd;
            &quot;recurringChargeConfig&quot;: {&#xd;
                &quot;frequencyLength&quot;: 1,&#xd;
                &quot;frequencyUnit&quot;: &quot;Year&quot;&#xd;
            },&#xd;
            &quot;promoCode&quot;: &quot;null&quot;,&#xd;
            &quot;autoRenewal&quot;: true,&#xd;
            &quot;subscriptionStartDate&quot;: &quot;${Timestamp}&quot;,&#xd;
            &quot;type&quot;: &quot;wex&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;customer&quot;: {&#xd;
        &quot;hpId&quot;: &quot;WEXPO${Customer_HPID}&quot;,&#xd;
        &quot;soldToBpId&quot;: &quot;${soldToBpId}&quot;,&#xd;
        &quot;shipToBpId&quot;: &quot;${shipToBpId}&quot;,&#xd;
        &quot;firstName&quot;: &quot;${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;${LName}&quot;,&#xd;
        &quot;email&quot;: &quot;wexpo${email}&quot;,&#xd;
        &quot;locale&quot;: &quot;en&quot;,&#xd;
        &quot;phoneNumber&quot;:&quot;2345112345&quot;,&#xd;
        &quot;extension&quot;:&quot;11&quot;,&#xd;
        &quot;phoneCountryCode&quot;:&quot;+1&quot;&#xd;
    },&#xd;
    &quot;paymentMethod&quot;: {&#xd;
        &quot;details&quot;: {&#xd;
            &quot;type&quot;: &quot;Purchase Order&quot;,&#xd;
            &quot;lastFour&quot;: &quot;4545&quot;,&#xd;
            &quot;paymentProcessor&quot;: &quot;${CardType_MasterCard}&quot;,&#xd;
            &quot;expiryDate&quot;: &quot;${Timestamp}&quot;,&#xd;
            &quot;paymentGateway&quot;: &quot;PGS&quot;,&#xd;
            &quot;token&quot;: &quot;${CCToken_MasterCard}&quot;,&#xd;
            &quot;tokenSignature&quot;: &quot;${CCSignature_MasterCard}&quot;,&#xd;
            &quot;cardHolderName&quot;: &quot;${FName} ${LName}&quot;,&#xd;
            &quot;poNumber&quot;: &quot;PO112402202300027&quot;,&#xd;
            &quot;paymentTerm&quot;: &quot;NT30&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;shipping&quot;: {&#xd;
        &quot;address&quot;: {&#xd;
            &quot;firstName&quot;: &quot;S${FName}&quot;,&#xd;
            &quot;lastName&quot;: &quot;S${LName}&quot;,&#xd;
            &quot;address1&quot;: &quot;WEXPO${Order_ID} sh/1 Park Street&quot;,&#xd;
            &quot;address2&quot;: &quot;sh_address_WEXPO${Order_ID}&quot;,&#xd;
            &quot;city&quot;: &quot;Melrose&quot;,&#xd;
            &quot;stateProvince&quot;: &quot;TX&quot;,&#xd;
            &quot;countryCode&quot;: &quot;US&quot;,&#xd;
            &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
            &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
            &quot;extension&quot;: &quot;1121&quot;,&#xd;
            &quot;company&quot;: &quot;Gekko test&quot;,&#xd;
            &quot;hpId&quot;: &quot;WEXPO${Customer_HPID}&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;billingAddress&quot;: {&#xd;
        &quot;firstName&quot;: &quot;S${FName}&quot;,&#xd;
        &quot;lastName&quot;: &quot;S${LName}&quot;,&#xd;
        &quot;address1&quot;: &quot;WEXPO${Order_ID} sh/1 Park Street&quot;,&#xd;
        &quot;address2&quot;: &quot;sh_address_WEXPO${Order_ID}&quot;,&#xd;
        &quot;city&quot;: &quot;Melrose&quot;,&#xd;
        &quot;stateProvince&quot;: &quot;WI&quot;,&#xd;
        &quot;countryCode&quot;: &quot;US&quot;,&#xd;
        &quot;zipCode&quot;: &quot;12121&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;1234567890&quot;,&#xd;
        &quot;extension&quot;: &quot;112122&quot;,&#xd;
        &quot;company&quot;: &quot;Gekko qa&quot;,&#xd;
        &quot;hpId&quot;: &quot;WEXPO${Customer_HPID}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="695991730">Order has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Scope.variable"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WEX_Order_Deatils_From_BRIM" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Pause 1.5min" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">90000</stringProp>
              </TestAction>
              <hashTree/>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WEX_GET_API_Order_Validation_BRIM_ContractAccount_Subscription_Credit_Card" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_BRIM_ContractAccountCreate_Credit_Card" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/WEXCC${Order_ID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">ContractAccountCreate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - C_Subscription_ID_Credit_Card" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Subscription_ID_Credit_Card</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;subscriptionId&quot;:(.*?),</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Subscription_ID</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Contract_Account_ID_Credit_Card" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Contract_Account_ID_Credit_Card</stringProp>
                    <stringProp name="RegexExtractor.regex">Contract Acccount (.*?) created</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Contract_Account_ID</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID_Credit_Card" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Txn_ID_CC</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(?i)(.*?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Txn_ID</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Contract_Account Table" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1359789613">&quot;contractAccountId&quot;:&quot;${C_Contract_Account_ID_Credit_Card}&quot;</stringProp>
                      <stringProp name="964916967">[{\&quot;BusinessPartner\&quot;:{\&quot;SoldTo\&quot;:\&quot;${soldToBpId}\&quot;,\&quot;ShipTo\&quot;:\&quot;${__groovy(${shipToBpId}-1,)}\&quot;}</stringProp>
                      <stringProp name="721355317">itemType&quot;:&quot;wex&quot;</stringProp>
                      <stringProp name="-98486877">&quot;subscriptionStatus&quot;:&quot;ACTIVE&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM_Contract" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1199967667">Token Generation Requested</stringProp>
                      <stringProp name="383370914">Token Generation Success</stringProp>
                      <stringProp name="2057661643">&quot;externalSystemName&quot;:&quot;BRIM&quot;</stringProp>
                      <stringProp name="1426913737">{\&quot;ContractAccount\&quot;:{\&quot;BusinessPartner\&quot;:{\&quot;Language\&quot;:\&quot;EN\&quot;,</stringProp>
                      <stringProp name="195218160">&quot;PaymentTerms\&quot;:\&quot;ZCPA\&quot;,\&quot;IncomingPaymentMethod\&quot;:\&quot;A\&quot;,\&quot;AccountDeterminationID\&quot;:\&quot;NB\&quot;,\&quot;EventType\&quot;:\&quot;C\&quot;,\&quot;ContractAccountCategory\&quot;:\&quot;NB\&quot;,\&quot;ContractAccountName\&quot;:\&quot;WEXCC${Customer_HPID}\&quot;,\&quot;CompanyCodeGroup\&quot;:\&quot;US11\&quot;,\&quot;StandardCompanyCode\&quot;:\&quot;US11\&quot;,\&quot;InvoiceLanguage\&quot;:\&quot;EN\&quot;,\&quot;PaymentToken\&quot;:\&quot;${CCToken_AMEX}\&quot;,\&quot;PaymentSignature\&quot;:\&quot;${CCSignature_AMEX}\&quot;,\&quot;PaymentLastFour\&quot;:\&quot;1234\&quot;,\&quot;PaymentExpire\&quot;:\&quot;12/2024\&quot;,\&quot;PaymentType\&quot;:\&quot;${CardType_AMEX}\&quot;,\&quot;CardHolderName\&quot;:\&quot;${FName} ${LName}  @%\&quot;,\&quot;PaymentExpirationMonth\&quot;:\&quot;12\&quot;,\&quot;PaymentExpirationYear\&quot;:\&quot;2024\&quot;,\&quot;Currency\&quot;:\&quot;USD\&quot;</stringProp>
                      <stringProp name="-11967359">&quot;OutgoingPaymentMethod\&quot;:\&quot;B\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;0001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;0001\&quot;</stringProp>
                      <stringProp name="1857721038">&quot;statusCodeValue\&quot;:200</stringProp>
                      <stringProp name="-2083664997">&quot;statusCode\&quot;:\&quot;OK\&quot;</stringProp>
                      <stringProp name="-1751757284">Contract Acccount ${C_Contract_Account_ID_Credit_Card} created successfully</stringProp>
                      <stringProp name="731903864">Sold To BP ${C_SoldTo_ID_Credit_Card} created successfully</stringProp>
                      <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_BRIM_SubscriptionCreate_Credit_Card" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/WEXCC${Order_ID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">SubscriptionCreate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_CC</stringProp>
                    <stringProp name="RegexExtractor.regex">Provider document (.*?) Created</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1199967667">Token Generation Requested</stringProp>
                      <stringProp name="383370914">Token Generation Success</stringProp>
                      <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                      <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                      <stringProp name="2047348">BRIM</stringProp>
                      <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-900353270">[{\&quot;SubscriptionOrderItem\&quot;:\&quot;10\&quot;,\&quot;ContractAccount\&quot;:\&quot;${C_Contract_Account_ID_Credit_Card}\&quot;,\&quot;Material\&quot;:\&quot;U76S2SB\&quot;,\&quot;Quantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;},\&quot;PriceComponent\&quot;:{\&quot;ConditionType\&quot;:\&quot;ZSAF\&quot;,\&quot;ConditionRateValue\&quot;:\&quot;3.00\&quot;,\&quot;ConditionCurrency\&quot;:\&quot;USD\&quot;,\&quot;ConditionQuantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;}},\&quot;BillingCycle\&quot;:\&quot;MBS\&quot;,\&quot;Characteristics\&quot;:[{\&quot;Characteristic\&quot;:\&quot;AutoRenewalFlag\&quot;,\&quot;Value\&quot;:\&quot;Y\&quot;},{\&quot;Characteristic\&quot;:\&quot;Licenses\&quot;,\&quot;Value\&quot;:\&quot;1\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingModel\&quot;,\&quot;Value\&quot;:\&quot;SUBS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BusinessModel\&quot;,\&quot;Value\&quot;:\&quot;SAAS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingType\&quot;,\&quot;Value\&quot;:\&quot;ADV\&quot;},{\&quot;Characteristic\&quot;:\&quot;ChargeType\&quot;,\&quot;Value\&quot;:\&quot;RECURRING\&quot;}]}]</stringProp>
                      <stringProp name="1857721039">&quot;statusCodeValue\&quot;:201</stringProp>
                      <stringProp name="-1585296843">&quot;statusCode\&quot;:\&quot;CREATED\&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID" enabled="true">
                    <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                    <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_CC</stringProp>
                    <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                    <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                    <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                    <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                  </BoundaryExtractor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-TransactionID" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_CC&quot;)
def storedID = vars.get(&quot;C_Txn_ID_CC&quot;)
log.info(&quot;extratcted one&quot; +extractedID)
log.info(&quot;stored one&quot; +storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-\events" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                      <stringProp name="-1865790319">&quot;Provider document ${C_Ext_Ref_ID_CC} Created successfully</stringProp>
                      <stringProp name="-672700687">&quot;ContractAccountID\&quot;:\&quot;${C_Contract_Account_ID_Credit_Card}\&quot;,\&quot;SubscriptionContractItem\&quot;:\&quot;000010\&quot;,\&quot;Material\&quot;:\&quot;U76S2SB\&quot;</stringProp>
                      <stringProp name="1519147493">&quot;OriginalSourceSystem\&quot;:\&quot;${sourcesystem}\&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Subscription Table" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-776463197">&quot;externalRefId&quot;:&quot;${C_Ext_Ref_ID_CC}&quot;</stringProp>
                      <stringProp name="-631002258">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion- Order_Info" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1329894885">&quot;shippingInfo&quot;:&quot;{\&quot;address\&quot;:{\&quot;firstName\&quot;:\&quot;AD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;AD${LName}\&quot;,\&quot;address1\&quot;:\&quot;WEXCC${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_WEXCC${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;LA\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;WEXCC${Customer_HPID}\&quot;}</stringProp>
                      <stringProp name="1987211500">&quot;paymentMethod&quot;:&quot;{\&quot;details\&quot;:{\&quot;type\&quot;:\&quot;Credit Card\&quot;,\&quot;lastFour\&quot;:\&quot;1234\&quot;,\&quot;paymentProcessor\&quot;:\&quot;${CardType_AMEX}\&quot;,\&quot;expiryDate\&quot;:\&quot;12/2024\&quot;,\&quot;paymentGateway\&quot;:\&quot;PGS\&quot;,\&quot;token\&quot;:\&quot;${CCToken_AMEX}\&quot;,\&quot;tokenSignature\&quot;:\&quot;${CCSignature_AMEX}\&quot;,\&quot;cardHolderName\&quot;:\&quot;${FName} ${LName}  @%\&quot;</stringProp>
                      <stringProp name="734645367">&quot;billingAddress&quot;:&quot;{\&quot;firstName\&quot;:\&quot;AD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;AD${LName}\&quot;,\&quot;address1\&quot;:\&quot;WEXCC${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_WEXCC${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;NY\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;WEXCC${Customer_HPID}\&quot;}</stringProp>
                      <stringProp name="-1764398874">&quot;orderStatus&quot;:&quot;CREATED&quot;</stringProp>
                      <stringProp name="642361988">&quot;clientId&quot;:&quot;${ClientID}&quot;</stringProp>
                      <stringProp name="-1017261393">&quot;customerHpId&quot;:&quot;WEXCC${Customer_HPID}&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion_Order_Info_shippingInfo" enabled="true">
                    <stringProp name="JSON_PATH">$..order_Info.shippingInfo</stringProp>
                    <stringProp name="EXPECTED_VALUE">[
  &quot;{\&quot;address\&quot;:{\&quot;firstName\&quot;:\&quot;AD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;AD${LName}\&quot;,\&quot;address1\&quot;:\&quot;WEXCC${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_WEXCC${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;LA\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;WEXCC${Customer_HPID}\&quot;}}&quot;
]</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion_Order_Info_billingAddress" enabled="true">
                    <stringProp name="JSON_PATH">$..order_Info.billingAddress</stringProp>
                    <stringProp name="EXPECTED_VALUE">[
  &quot;{\&quot;firstName\&quot;:\&quot;AD${FName}\&quot;,\&quot;lastName\&quot;:\&quot;AD${LName}\&quot;,\&quot;address1\&quot;:\&quot;WEXCC${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_WEXCC${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;NY\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1122\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;WEXCC${Customer_HPID}\&quot;}&quot;
]</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sourcesystem" enabled="true">
                    <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                    <stringProp name="BoundaryExtractor.refname">sourcesystem</stringProp>
                    <stringProp name="BoundaryExtractor.lboundary">&quot;OriginalSourceSystem\&quot;:\&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.rboundary">\&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.default"></stringProp>
                    <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                    <stringProp name="BoundaryExtractor.match_number">2</stringProp>
                  </BoundaryExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_DistributionChannel-OrderInfoTable_Credit_Card" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/WEXCC${Order_ID}/distributionChannelDetails</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                      <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                      <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_DistributionChannel-SubsTable_Credit_Card" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/subscriptions/${C_Subscription_ID_Credit_Card}/distributionChannelDetails</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1191546130">&quot;subscriptionId&quot;:${C_Subscription_ID_Credit_Card}</stringProp>
                      <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                      <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                      <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">15000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WEX_GET_API_Order_Validation_BRIM_ContractAccount_Subscription_PO" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_BRIM_ContractAccountCreate_PO" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/WEXPO${Order_ID}?operationName=ContractAccountCreate</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - C_Subscription_ID_PO" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Subscription_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;subscriptionId&quot;:(.*?),</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Subscription_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Contract_Account_ID_PO" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Contract_Account_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.regex">Contract Acccount (.*?) created</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Contract_Account_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID_PO" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Txn_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Txn_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Contract_Account Table" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1147683470">&quot;contractAccountId&quot;:&quot;${C_Contract_Account_ID_PO}&quot;</stringProp>
                      <stringProp name="964916967">[{\&quot;BusinessPartner\&quot;:{\&quot;SoldTo\&quot;:\&quot;${soldToBpId}\&quot;,\&quot;ShipTo\&quot;:\&quot;${__groovy(${shipToBpId}-1,)}\&quot;}</stringProp>
                      <stringProp name="721355317">itemType&quot;:&quot;wex&quot;</stringProp>
                      <stringProp name="-98486877">&quot;subscriptionStatus&quot;:&quot;ACTIVE&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM_Contract" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1199967667">Token Generation Requested</stringProp>
                      <stringProp name="383370914">Token Generation Success</stringProp>
                      <stringProp name="2057661643">&quot;externalSystemName&quot;:&quot;BRIM&quot;</stringProp>
                      <stringProp name="1426913737">{\&quot;ContractAccount\&quot;:{\&quot;BusinessPartner\&quot;:{\&quot;Language\&quot;:\&quot;EN\&quot;,</stringProp>
                      <stringProp name="1319474132">&quot;OutgoingPaymentMethod\&quot;:\&quot;U\&quot;,\&quot;IncomingCreditCard\&quot;:\&quot;0001\&quot;,\&quot;OutgoingCreditCard\&quot;:\&quot;0001\&quot;</stringProp>
                      <stringProp name="1857721038">&quot;statusCodeValue\&quot;:200</stringProp>
                      <stringProp name="-2083664997">&quot;statusCode\&quot;:\&quot;OK\&quot;</stringProp>
                      <stringProp name="-1839944323">Contract Acccount ${C_Contract_Account_ID_PO} created successfully</stringProp>
                      <stringProp name="-34485087">Sold To BP ${C_SoldTo_ID_PO} created successfully</stringProp>
                      <stringProp name="1075596377">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},\&quot;SoldTo\&quot;</stringProp>
                      <stringProp name="-855551496">&quot;PaymentType\&quot;:\&quot;${CardType_VISA}\&quot;,\&quot;CardHolderName\&quot;:\&quot;${FName} ${LName}\&quot;,\&quot;PaymentExpirationMonth\&quot;:\&quot;12\&quot;,\&quot;PaymentExpirationYear\&quot;:\&quot;2024\&quot;,\&quot;Currency\&quot;:\&quot;USD\&quot;</stringProp>
                      <stringProp name="-599040242">&quot;PaymentTerms\&quot;:\&quot;ZCPC\&quot;,\&quot;IncomingPaymentMethod\&quot;:\&quot;V\&quot;,\&quot;AccountDeterminationID\&quot;:\&quot;NB\&quot;,\&quot;EventType\&quot;:\&quot;C\&quot;,\&quot;ContractAccountCategory\&quot;:\&quot;NB\&quot;,\&quot;ContractAccountName\&quot;:\&quot;WEXPO${Order_ID}\&quot;,\&quot;CompanyCodeGroup\&quot;:\&quot;US11\&quot;,\&quot;StandardCompanyCode\&quot;:\&quot;US11\&quot;,\&quot;InvoiceLanguage\&quot;:\&quot;EN\&quot;,\&quot;PaymentToken\&quot;:\&quot;${CCToken_VISA}\&quot;,\&quot;PaymentSignature\&quot;:\&quot;${CCSignature_VISA}\&quot;,\&quot;PaymentLastFour\&quot;:\&quot;1234\&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_BRIM_SubscriptionCreate_PO" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/WEXPO${Order_ID}?operationName=SubscriptionCreate</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">C_Ext_Ref_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.regex">Provider document (.*?) Created</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID_PO</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1199967667">Token Generation Requested</stringProp>
                      <stringProp name="383370914">Token Generation Success</stringProp>
                      <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                      <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                      <stringProp name="2047348">BRIM</stringProp>
                      <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-519127396">[{\&quot;SubscriptionOrderItem\&quot;:\&quot;10\&quot;,\&quot;ContractAccount\&quot;:\&quot;${C_Contract_Account_ID_PO}\&quot;,\&quot;Material\&quot;:\&quot;U76S2SB\&quot;,\&quot;Quantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;},\&quot;PriceComponent\&quot;:{\&quot;ConditionType\&quot;:\&quot;ZSAF\&quot;,\&quot;ConditionRateValue\&quot;:\&quot;10.00\&quot;,\&quot;ConditionCurrency\&quot;:\&quot;USD\&quot;,\&quot;ConditionQuantity\&quot;:{\&quot;QuantityUnit\&quot;:\&quot;EA\&quot;,\&quot;Description\&quot;:\&quot;1\&quot;}},\&quot;BillingCycle\&quot;:\&quot;ABS\&quot;,\&quot;Characteristics\&quot;:[{\&quot;Characteristic\&quot;:\&quot;AutoRenewalFlag\&quot;,\&quot;Value\&quot;:\&quot;Y\&quot;},{\&quot;Characteristic\&quot;:\&quot;Licenses\&quot;,\&quot;Value\&quot;:\&quot;1\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingModel\&quot;,\&quot;Value\&quot;:\&quot;SUBS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BusinessModel\&quot;,\&quot;Value\&quot;:\&quot;SAAS\&quot;},{\&quot;Characteristic\&quot;:\&quot;BillingType\&quot;,\&quot;Value\&quot;:\&quot;ARR\&quot;},{\&quot;Characteristic\&quot;:\&quot;PONumber\&quot;,\&quot;Value\&quot;:\&quot;PO112402202300027\&quot;},{\&quot;Characteristic\&quot;:\&quot;ChargeType\&quot;,\&quot;Value\&quot;:\&quot;RECURRING\&quot;}]}]</stringProp>
                      <stringProp name="1857721039">&quot;statusCodeValue\&quot;:201</stringProp>
                      <stringProp name="-1585296843">&quot;statusCode\&quot;:\&quot;CREATED\&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-ReferenceID" enabled="true">
                    <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                    <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_PO</stringProp>
                    <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                    <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                    <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                    <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                  </BoundaryExtractor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor_Txn_ID_PO" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_PO&quot;)
def storedID = vars.get(&quot;C_Txn_ID_PO&quot;)
log.info(&quot;extratcted one&quot; +extractedID)
log.info(&quot;stored one&quot; +storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-\events" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                      <stringProp name="-684606224">&quot;Provider document ${C_Ext_Ref_ID_PO} Created successfully</stringProp>
                      <stringProp name="-832713850">&quot;ContractAccountID\&quot;:\&quot;${C_Contract_Account_ID_PO}\&quot;</stringProp>
                      <stringProp name="41360951">\&quot;SubscriptionContractItem\&quot;:\&quot;000010\&quot;</stringProp>
                      <stringProp name="4880503">&quot;Material\&quot;:\&quot;U76S2SB\&quot;</stringProp>
                      <stringProp name="1519147493">&quot;OriginalSourceSystem\&quot;:\&quot;${sourcesystem}\&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Subscription Table" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-776064382">&quot;externalRefId&quot;:&quot;${C_Ext_Ref_ID_PO}&quot;</stringProp>
                      <stringProp name="1913766526">\&quot;OrgUnit\&quot;:{\&quot;SalesOrganization\&quot;:\&quot;US11\&quot;,\&quot;DistributionChannel\&quot;:\&quot;${DC}\&quot;,\&quot;Division\&quot;:\&quot;00\&quot;},</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion- Order_Info" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1650915661">&quot;shippingInfo&quot;:&quot;{\&quot;address\&quot;:{\&quot;firstName\&quot;:\&quot;S${FName}\&quot;,\&quot;lastName\&quot;:\&quot;S${LName}\&quot;,\&quot;address1\&quot;:\&quot;WEXPO${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_WEXPO${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;TX\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;1121\&quot;,\&quot;company\&quot;:\&quot;Gekko test\&quot;,\&quot;hpId\&quot;:\&quot;WEXPO${Customer_HPID}\&quot;}}&quot;</stringProp>
                      <stringProp name="-1596080482">&quot;paymentGateway\&quot;:\&quot;PGS\&quot;,\&quot;token\&quot;:\&quot;${CCToken_MasterCard}\&quot;,\&quot;tokenSignature\&quot;:\&quot;${CCSignature_MasterCard}\&quot;,\&quot;cardHolderName\&quot;:\&quot;${FName} ${LName}\&quot;</stringProp>
                      <stringProp name="-1764398874">&quot;orderStatus&quot;:&quot;CREATED&quot;</stringProp>
                      <stringProp name="642361988">&quot;clientId&quot;:&quot;${ClientID}&quot;</stringProp>
                      <stringProp name="1809539824">&quot;customerHpId&quot;:&quot;WEXPO${Customer_HPID}&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion_Info.billingAddress" enabled="true">
                    <stringProp name="JSON_PATH">$..order_Info.billingAddress</stringProp>
                    <stringProp name="EXPECTED_VALUE">[
  &quot;{\&quot;firstName\&quot;:\&quot;S${FName}\&quot;,\&quot;lastName\&quot;:\&quot;S${LName}\&quot;,\&quot;address1\&quot;:\&quot;WEXPO${Order_ID} sh/1 Park Street\&quot;,\&quot;address2\&quot;:\&quot;sh_address_WEXPO${Order_ID}\&quot;,\&quot;city\&quot;:\&quot;Melrose\&quot;,\&quot;stateProvince\&quot;:\&quot;WI\&quot;,\&quot;countryCode\&quot;:\&quot;US\&quot;,\&quot;zipCode\&quot;:\&quot;12121\&quot;,\&quot;phoneNumber\&quot;:\&quot;1234567890\&quot;,\&quot;extension\&quot;:\&quot;112122\&quot;,\&quot;company\&quot;:\&quot;Gekko qa\&quot;,\&quot;hpId\&quot;:\&quot;WEXPO${Customer_HPID}\&quot;}&quot;
]</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">false</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="sourcesystem" enabled="true">
                    <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                    <stringProp name="BoundaryExtractor.refname">sourcesystem</stringProp>
                    <stringProp name="BoundaryExtractor.lboundary">&quot;OriginalSourceSystem\&quot;:\&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.rboundary">\&quot;</stringProp>
                    <stringProp name="BoundaryExtractor.default"></stringProp>
                    <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                    <stringProp name="BoundaryExtractor.match_number">2</stringProp>
                  </BoundaryExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_DistributionChannel-OrderInfoTable_PO" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/orders/WEXPO${Order_ID}/distributionChannelDetails</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                      <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                      <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_GET_API_DistributionChannel-SubsTable_PO" enabled="true">
                  <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.path">/commerce-controller/internal/v1/subscriptions/${C_Subscription_ID_PO}/distributionChannelDetails</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1843364407">&quot;subscriptionId&quot;:${C_Subscription_ID_PO}</stringProp>
                      <stringProp name="-555351657">&quot;salesOrganization&quot;:&quot;US11&quot;</stringProp>
                      <stringProp name="723099303">&quot;division&quot;:&quot;00&quot;</stringProp>
                      <stringProp name="601052872">&quot;distributionChannel&quot;:&quot;${DC}&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="TestPlan.comments">Subscription_ID; Subscription_ID</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">15000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="WEX_Cancel_Subscription" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_Cancel_Subscription" enabled="true">
                <stringProp name="TestPlan.comments">select subscription_id,customer_hp_id from subscription;</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/customers/WEXCC${Customer_HPID}/subscriptions/${C_Subscription_ID_Credit_Card}/cancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"> {&#xd;
  &quot;cancelledAt&quot;: &quot;${Cancel_Date}T23:00:00+00:00&quot;,&#xd;
  &quot;externalRef&quot;: &#xd;
  [&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;R Order Num&quot;,&#xd;
      &quot;value&quot;: &quot;Cancel Subscription&quot;&#xd;
    }&#xd;
  ],&#xd;
    &quot;cancellationFee&quot;: &quot;1000&quot;,&#xd;
    &quot;currency&quot;: &quot;USD&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion_Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-483202528">&quot;Cancellation request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">8000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action- Wait" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">120000</stringProp>
              </TestAction>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_Subscription_OrderID_Cancel" enabled="true">
                <stringProp name="TestPlan.comments">existing hpid, client Id</stringProp>
                <stringProp name="HTTPSampler.domain">${Apigee_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${API_Version}/commerce-controller/orders/WEXCC${Order_ID}/subscriptions</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="state" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="920709644">&quot;state&quot;:&quot;CANCELLED&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="autoRenewal" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1400509572">&quot;autoRenewal&quot;:false</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancellationRequestDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="446166954">&quot;cancellationRequestDate&quot;:&quot;${Cancel_Date}T23:00&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="cancelledDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647022123">&quot;cancelledDate&quot;:&quot;&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">52</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_BRIM_SubscriptionCancel" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">commerce-controller/internal/v1/orders/WEXCC${Order_ID}?operationName=SubscriptionCancel</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor -External_ref id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">WEX_Ext_Ref_ID_Cancel</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;Subscription (.*?) cancelled successfully</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Ext_Ref_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Transaction ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">C_Txn_ID_Cancel_WEX</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;transactionId&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not Found C_Txn_ID</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-Token" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1199967667">Token Generation Requested</stringProp>
                    <stringProp name="383370914">Token Generation Success</stringProp>
                    <stringProp name="1185817926">XCSRF Token Generation Request Sent</stringProp>
                    <stringProp name="-703542653">XCSRF Token Generation Response Received</stringProp>
                    <stringProp name="2047348">BRIM</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="operation" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="403002371">&quot;operation&quot;:&quot;Cancel&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion-BRIM" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1330931278">&quot;Name\&quot;:\&quot;CANC_REASON\&quot;,\&quot;Value\&quot;:\&quot;Z011\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SubscriptionContractChangeProcessType" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="54421074">&quot;SubscriptionContractChangeProcessType\&quot;:\&quot;CANCEL\&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">C_Txn_ID</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                  <stringProp name="BoundaryExtractor.refname">Extract_ReferenceID_WEX</stringProp>
                  <stringProp name="BoundaryExtractor.lboundary">&quot;ReferenceID\&quot;:\&quot;</stringProp>
                  <stringProp name="BoundaryExtractor.rboundary">\&quot;,\&quot;CreationDateTime</stringProp>
                  <stringProp name="BoundaryExtractor.default">Not able to extract</stringProp>
                  <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                  <stringProp name="BoundaryExtractor.match_number">1</stringProp>
                </BoundaryExtractor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion-C_Txn_ID_Cancel" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def extractedID = vars.get(&quot;Extract_ReferenceID_WEX&quot;)
def storedID = vars.get(&quot;C_Txn_ID_Cancel_WEX&quot;)
log.info(&quot;extratcted C_Txn_ID_Cancel&quot; + extractedID)
log.info(&quot;stored C_Txn_ID_Cancel&quot; + storedID)
if (!extractedID.equalsIgnoreCase(storedID)) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Mismatch: extracted ID (&quot; + extractedID + &quot;) does not match stored ID (&quot; + storedID + &quot;)&quot;)
}</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="eventStatus-\events" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1295278431">&quot;eventStatus&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-343982880">&quot;Subscription ${WEX_Ext_Ref_ID_Cancel} cancelled successfully</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WEX_Email Status-Cancellation- GekkoCancelWOFees" enabled="true">
                <stringProp name="HTTPSampler.domain">${GET_API_IP}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">gekko-notification/internal/v1/notifications/fetch-mail-status-data</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="orderId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">WEXCC${Order_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">orderId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${C_Token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">clientId</stringProp>
                      <stringProp name="Header.value">${ClientID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="GekkoCancelWOFees" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-906402038">&quot;eventType&quot;:&quot;GekkoCancelWOFees&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Sanity_Test_View_ResultsTree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${CONFIG_PATH}/TestResults/${Sanity_Report}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
